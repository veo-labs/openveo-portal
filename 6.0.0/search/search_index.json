{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What's OpenVeo Portal? OpenVeo Portal is a Node.js / AngularJS application. It embeds an HTTP applicative server based on Express framework . It aims to offer a portal to access medias exposed by an OpenVeo server associated to an OpenVeo Publish plugin. It includes the following features: An home page to present the most seen medias A live page to stream a live from Wowza, Youtube or Vodalys Studio A search engine Support for authentication using local database, CAS or LDAP Themes Statistics with support for Piwik An administration interface Authentication OpenVeo Portal supports the following SSO (Single Sign On) providers: LDAP CAS Compatibility OpenVeo Portal has been tested on the following operating systems: Ubuntu 16.04 OpenVeo has been tested on the following: Google Chrome Mozilla Firefox Opera Edge Screenshots Home page Player page Back office dashboard Back office promoted videos configuration Back office settings","title":"INTRODUCTION"},{"location":"#whats-openveo-portal","text":"OpenVeo Portal is a Node.js / AngularJS application. It embeds an HTTP applicative server based on Express framework . It aims to offer a portal to access medias exposed by an OpenVeo server associated to an OpenVeo Publish plugin. It includes the following features: An home page to present the most seen medias A live page to stream a live from Wowza, Youtube or Vodalys Studio A search engine Support for authentication using local database, CAS or LDAP Themes Statistics with support for Piwik An administration interface","title":"What's OpenVeo Portal?"},{"location":"#authentication","text":"OpenVeo Portal supports the following SSO (Single Sign On) providers: LDAP CAS","title":"Authentication"},{"location":"#compatibility","text":"OpenVeo Portal has been tested on the following operating systems: Ubuntu 16.04 OpenVeo has been tested on the following: Google Chrome Mozilla Firefox Opera Edge","title":"Compatibility"},{"location":"#screenshots","text":"","title":"Screenshots"},{"location":"#home-page","text":"","title":"Home page"},{"location":"#player-page","text":"","title":"Player page"},{"location":"#back-office-dashboard","text":"","title":"Back office dashboard"},{"location":"#back-office-promoted-videos-configuration","text":"","title":"Back office promoted videos configuration"},{"location":"#back-office-settings","text":"","title":"Back office settings"},{"location":"advanced-configuration/","text":"Introduction Configuration files are all in user's directory under ~/.openveo/portal ~/.openveo/portal/conf.json ~/.openveo/portal/databaseConf.json ~/.openveo/portal/loggerConf.json ~/.openveo/portal/serverConf.json ~/.openveo/portal/webservicesConf.json Nb : You must restart OpenVeo Portal after modifications. Configure OpenVeo Portal Open ~/.openveo/portal/conf.json { passwordHashKey : KEY , // Replace KEY by a secret key used to encrypt users passwords theme : default , // The name of the theme to use (this is the name of the directory in assets/themes) exposedFilter : [ // A list of custom properties' ids defined in OpenVeo Publish to add as search engine filters VJWL6-0Cx , NkLcut70x , 4yYs5f0Ag ], categoriesFilter : 1443702123703 , // Id of the taxonomy categories defined in OpenVeo Publish privateFilter : [ // A list of groups' ids, defined in OpenVeo, only content in this list of groups will be available to an authenticated user 4keznvtlW ], publicFilter : [ // A list of groups' ids, defined in OpenVeo, only content in this list of groups will be available to an anonymous user Vyog3_KgW ], cache : { filterTTL : 600, // Time (in seconds) to keep the list of categories and custom properties' values in cache videoTTL : 60 // Time (in seconds) to keep information about a video in cache }, useDialog : true // true to open videos in a dialog, false to open videos in a new page } Configure database access Open ~/.openveo/portal/databaseConf.json { type : mongodb , // Do not change host : localhost , // MongoDB server host port : 27017, // MongoDB port database : DATABASE_NAME , // Replace DATABASE_NAME by the name of the OpenVeo Portal database username : DATABASE_USER_NAME , // Replace DATABASE_USER_NAME by the name of the database user password : DATABASE_USER_PWD // Replace DATABASE_USER_PWD by the password of the database user } Configure the logger Open ~/.openveo/portal/loggerConf.json { fileName : /var/log/openveo/openveo-portal.log , // Path to application log file level : info , // Log level maxFileSize : 104857600, // Maximum log file size (in Bytes) maxFiles : 2, // Maximum number of files archived console : true // Also print logs to standard output } Configure the server Open ~/.openveo/core/serverConf.json { port : PORT, // Replace PORT by the HTTP server port to use (e.g. 3003) sessionSecret : SECRET , // Replace SECRET by a secret used to secure HTTP sessions auth : { cas : { // CAS configuration version : 3 , // The version of the CAS server service : https://my-openveo-portal.test , // The service to use to authenticate to the CAS server url : https://my-cas-server.test:8443/cas , // The url of the CAS server userGroupAttribute : group , // The name of the CAS attribute holding the group name of a user userIdAttribute : id , // The name of the CAS attribute holding the unique id of a user userNameAttribute : name , // The name of the CAS attribute holding the name of a user userEmailAttribute : name , // The name of the CAS attribute holding the email of a user certificate : /etc/ssl/certs/cas.crt , // The absolute path of the CAS server certificate if root CA is not in the Node.JS well known CAs groupAssociations : [ // Matches between LDAP groups and OpenVeo groups of contents { group : my-cas-group , // CAS group to associate groups : [ Ef5erF , 89erFgbG ] // Authorized OpenVeo group ids for the CAS group } ] }, ldapauth : { // LDAP configuration url : ldaps://my-ldap.test , // The url of the LDAP server bindAttribute : dn , // The LDAP attribute used by bindDn (default to dn ) bindDn : cn=my-user,dc=my-ldap,dc=test , // The value of the bindAttribute associated to the entry used to connect to the server API bindPassword : qT5gvobG2ZxYSiY2r4mt , // The password of the entry used to connect to the server API searchBase : ou=user,dc=my-ldap,dc=test , // The search base when looking for users searchScope : sub , // The search scope when looking for users (default to sub ) searchFilter : ( (objectclass=person)(cn={{username}})) , // The search filter to find user by name, use placeholder {{username}} which will be replaced by the user name when searching userGroupAttribute : group , // The name of the LDAP attribute holding the group name of a user userIdAttribute : dn , // The name of the LDAP attribute holding the unique id of a user userNameAttribute : cn , // The name of the LDAP attribute holding the name of a user userEmailAttribute : email , // The name of the LDAP attribute holding the email of a user certificate : /etc/ssl/certs/ldap.crt , // The absolute path of the LDAP server certificate full chain if root CA is not in the Node.JS well known CAs groupAssociations : [ // Matches between LDAP groups and OpenVeo groups of contents { group : my-ldap-group , // LDAP group to associate groups : [ Ef5erF , 89erFgbG ] // Authorized OpenVeo group ids for the LDAP group } ] } local : true // Activate local authentication (WARNING: settings this to false won't remove the local authentication, to remove local authentication remove the property) } } Configure the access to OpenVeo Web Service Open ~/.openveo/portal/webservicesConf.json { path : https://www.my-openveo-ws.com , // Complete path to the web service (including port if necessary) clientID : 65d6247f0293049523d6a5e2efdf49ac07b51600 , // OpenVeo Portal id secretID : 8a7b0d43a631b52cf15e89eba7a65f274ccc7f73 , // OpenVeo Portal secret certificate : server.crt // The absolute path of the OpenVeo Web Service certificate if root CA is not in the system well known CAs }","title":"Advanced configuration"},{"location":"advanced-configuration/#introduction","text":"Configuration files are all in user's directory under ~/.openveo/portal ~/.openveo/portal/conf.json ~/.openveo/portal/databaseConf.json ~/.openveo/portal/loggerConf.json ~/.openveo/portal/serverConf.json ~/.openveo/portal/webservicesConf.json Nb : You must restart OpenVeo Portal after modifications.","title":"Introduction"},{"location":"advanced-configuration/#configure-openveo-portal","text":"Open ~/.openveo/portal/conf.json { passwordHashKey : KEY , // Replace KEY by a secret key used to encrypt users passwords theme : default , // The name of the theme to use (this is the name of the directory in assets/themes) exposedFilter : [ // A list of custom properties' ids defined in OpenVeo Publish to add as search engine filters VJWL6-0Cx , NkLcut70x , 4yYs5f0Ag ], categoriesFilter : 1443702123703 , // Id of the taxonomy categories defined in OpenVeo Publish privateFilter : [ // A list of groups' ids, defined in OpenVeo, only content in this list of groups will be available to an authenticated user 4keznvtlW ], publicFilter : [ // A list of groups' ids, defined in OpenVeo, only content in this list of groups will be available to an anonymous user Vyog3_KgW ], cache : { filterTTL : 600, // Time (in seconds) to keep the list of categories and custom properties' values in cache videoTTL : 60 // Time (in seconds) to keep information about a video in cache }, useDialog : true // true to open videos in a dialog, false to open videos in a new page }","title":"Configure OpenVeo Portal"},{"location":"advanced-configuration/#configure-database-access","text":"Open ~/.openveo/portal/databaseConf.json { type : mongodb , // Do not change host : localhost , // MongoDB server host port : 27017, // MongoDB port database : DATABASE_NAME , // Replace DATABASE_NAME by the name of the OpenVeo Portal database username : DATABASE_USER_NAME , // Replace DATABASE_USER_NAME by the name of the database user password : DATABASE_USER_PWD // Replace DATABASE_USER_PWD by the password of the database user }","title":"Configure database access"},{"location":"advanced-configuration/#configure-the-logger","text":"Open ~/.openveo/portal/loggerConf.json { fileName : /var/log/openveo/openveo-portal.log , // Path to application log file level : info , // Log level maxFileSize : 104857600, // Maximum log file size (in Bytes) maxFiles : 2, // Maximum number of files archived console : true // Also print logs to standard output }","title":"Configure the logger"},{"location":"advanced-configuration/#configure-the-server","text":"Open ~/.openveo/core/serverConf.json { port : PORT, // Replace PORT by the HTTP server port to use (e.g. 3003) sessionSecret : SECRET , // Replace SECRET by a secret used to secure HTTP sessions auth : { cas : { // CAS configuration version : 3 , // The version of the CAS server service : https://my-openveo-portal.test , // The service to use to authenticate to the CAS server url : https://my-cas-server.test:8443/cas , // The url of the CAS server userGroupAttribute : group , // The name of the CAS attribute holding the group name of a user userIdAttribute : id , // The name of the CAS attribute holding the unique id of a user userNameAttribute : name , // The name of the CAS attribute holding the name of a user userEmailAttribute : name , // The name of the CAS attribute holding the email of a user certificate : /etc/ssl/certs/cas.crt , // The absolute path of the CAS server certificate if root CA is not in the Node.JS well known CAs groupAssociations : [ // Matches between LDAP groups and OpenVeo groups of contents { group : my-cas-group , // CAS group to associate groups : [ Ef5erF , 89erFgbG ] // Authorized OpenVeo group ids for the CAS group } ] }, ldapauth : { // LDAP configuration url : ldaps://my-ldap.test , // The url of the LDAP server bindAttribute : dn , // The LDAP attribute used by bindDn (default to dn ) bindDn : cn=my-user,dc=my-ldap,dc=test , // The value of the bindAttribute associated to the entry used to connect to the server API bindPassword : qT5gvobG2ZxYSiY2r4mt , // The password of the entry used to connect to the server API searchBase : ou=user,dc=my-ldap,dc=test , // The search base when looking for users searchScope : sub , // The search scope when looking for users (default to sub ) searchFilter : ( (objectclass=person)(cn={{username}})) , // The search filter to find user by name, use placeholder {{username}} which will be replaced by the user name when searching userGroupAttribute : group , // The name of the LDAP attribute holding the group name of a user userIdAttribute : dn , // The name of the LDAP attribute holding the unique id of a user userNameAttribute : cn , // The name of the LDAP attribute holding the name of a user userEmailAttribute : email , // The name of the LDAP attribute holding the email of a user certificate : /etc/ssl/certs/ldap.crt , // The absolute path of the LDAP server certificate full chain if root CA is not in the Node.JS well known CAs groupAssociations : [ // Matches between LDAP groups and OpenVeo groups of contents { group : my-ldap-group , // LDAP group to associate groups : [ Ef5erF , 89erFgbG ] // Authorized OpenVeo group ids for the LDAP group } ] } local : true // Activate local authentication (WARNING: settings this to false won't remove the local authentication, to remove local authentication remove the property) } }","title":"Configure the server"},{"location":"advanced-configuration/#configure-the-access-to-openveo-web-service","text":"Open ~/.openveo/portal/webservicesConf.json { path : https://www.my-openveo-ws.com , // Complete path to the web service (including port if necessary) clientID : 65d6247f0293049523d6a5e2efdf49ac07b51600 , // OpenVeo Portal id secretID : 8a7b0d43a631b52cf15e89eba7a65f274ccc7f73 , // OpenVeo Portal secret certificate : server.crt // The absolute path of the OpenVeo Web Service certificate if root CA is not in the system well known CAs }","title":"Configure the access to OpenVeo Web Service"},{"location":"getting-started/","text":"OpenVeo Portal Openveo Portal interacts with a Web Service exposed by an OpenVeo server associated to an OpenVeo Publish plugin. Download OpenVeo Portal Actually OpenVeo Portal can be downloaded directly from github : Select the tag you want to download ( from version =2.0.1 ) Then download the associated archive Deploy the archive on your server Install OpenVeo Portal From OpenVeo Portal root directory: npm install --production Nb : You will be prompted for some configuration. Don't worry if you made an error, you can edit configuration anytime using advanced configuration . Install a custom theme By default, OpenVeo Portal comes with a default theme. If this theme does not suite your graphical interface, you can customize OpenVeo Portal with your own theme and install it into assets/themes . Launch the application OpenVeo Portal is now installed. Launch it: node server.js","title":"Getting started"},{"location":"getting-started/#openveo-portal","text":"Openveo Portal interacts with a Web Service exposed by an OpenVeo server associated to an OpenVeo Publish plugin.","title":"OpenVeo Portal"},{"location":"getting-started/#download-openveo-portal","text":"Actually OpenVeo Portal can be downloaded directly from github : Select the tag you want to download ( from version =2.0.1 ) Then download the associated archive Deploy the archive on your server","title":"Download OpenVeo Portal"},{"location":"getting-started/#install-openveo-portal","text":"From OpenVeo Portal root directory: npm install --production Nb : You will be prompted for some configuration. Don't worry if you made an error, you can edit configuration anytime using advanced configuration .","title":"Install OpenVeo Portal"},{"location":"getting-started/#install-a-custom-theme","text":"By default, OpenVeo Portal comes with a default theme. If this theme does not suite your graphical interface, you can customize OpenVeo Portal with your own theme and install it into assets/themes .","title":"Install a custom theme"},{"location":"getting-started/#launch-the-application","text":"OpenVeo Portal is now installed. Launch it: node server.js","title":"Launch the application"},{"location":"prerequisites/","text":"OpenVeo Portal requires and has been tested on: Openveo ( =9.0.0 ) with Openveo Publish Plugin ( =11.0.0 ) - OpenVeo Portal retrieves all its videos from an OpenVeo server. OpenVeo must grant the following scopes to OpenVeo Portal: Get groups , Get taxonomies , Get properties , Increase video views , Get videos Node.js ( =12.4.0 ) - The server side of OpenVeo Portal is written in Node.js Npm ( =6.9.0 ) - Npm is used to install OpenVeo Portal dependencies MongoDB ( =3.0.0 ) - OpenVeo Portal stores user sessions in a MongoDB database NB: Moreover, for a Windows installation, Visual Studio Express is required as some OpenVeo dependencies are written in C and need to be compiled. For Linux you may have to install the package libkrb5-dev.","title":"Prerequisites"},{"location":"production/","text":"Launch in production To use OpenVeo Portal in a production environment, start the server in production: # Starts OpenVeo Portal application in production environment NODE_ENV=production node server.js Nb: You should also consider launching the process as a deamon.","title":"Production"},{"location":"production/#launch-in-production","text":"To use OpenVeo Portal in a production environment, start the server in production: # Starts OpenVeo Portal application in production environment NODE_ENV=production node server.js Nb: You should also consider launching the process as a deamon.","title":"Launch in production"},{"location":"developers/api/","text":"Server side API (Node.js) OpenVeo Portal server API is the generated version of the Node.JS code documentation. Client side API (AngularJS) OpenVeo Portal front API is the generated version of the documentation for the front AngularJS application. OpenVeo Portal admin API is the generated version of the documentation for the administration AngularJS application.","title":"API"},{"location":"developers/api/#server-side-api-nodejs","text":"OpenVeo Portal server API is the generated version of the Node.JS code documentation.","title":"Server side API (Node.js)"},{"location":"developers/api/#client-side-api-angularjs","text":"OpenVeo Portal front API is the generated version of the documentation for the front AngularJS application. OpenVeo Portal admin API is the generated version of the documentation for the administration AngularJS application.","title":"Client side API (AngularJS)"},{"location":"developers/coding-standards/","text":"OpenVeo Portal uses Node.js coding standards. ESLint is used to validate coding rules. You can launch a code verification using the following command: grunt eslint Nb: Both Node.js and AngularJS parts of OpenVeo Portal must respect the same coding standards","title":"Coding standards"},{"location":"developers/compilation/","text":"Introduction OpenVeo Portal is written using AngularJS and SASS / Compass. SASS files need to be compiled to generate the CSS and JavaScript files can be minified and aggregated for better performance. Front office and back office are two different applications and are not compiled the same way. Compile front office Compiling SASS files You can compile the SASS files of the front office using the following command: grunt compass:dist Or you can watch SASS files changes using the following command: grunt Compiling JavaScript files You'll probably want to compile AngularJS files, in production, for better performance. You can do it using: grunt dist Compile back office Compiling SASS files and JavaScript files You can compile the back office SASS files and JavaScript files using the following command: grunt build-admin It will generate source maps for both SASS files and JavaScript files. You can compile the back office without source maps using the following command (for production): grunt build-admin --production If you want the back office to be automatically compiled when a SASS file or a JavaScript file is changed use the following command: grunt watch:admin","title":"CSS / SASS / JS compilation"},{"location":"developers/compilation/#introduction","text":"OpenVeo Portal is written using AngularJS and SASS / Compass. SASS files need to be compiled to generate the CSS and JavaScript files can be minified and aggregated for better performance. Front office and back office are two different applications and are not compiled the same way.","title":"Introduction"},{"location":"developers/compilation/#compile-front-office","text":"","title":"Compile front office"},{"location":"developers/compilation/#compiling-sass-files","text":"You can compile the SASS files of the front office using the following command: grunt compass:dist Or you can watch SASS files changes using the following command: grunt","title":"Compiling SASS files"},{"location":"developers/compilation/#compiling-javascript-files","text":"You'll probably want to compile AngularJS files, in production, for better performance. You can do it using: grunt dist","title":"Compiling JavaScript files"},{"location":"developers/compilation/#compile-back-office","text":"","title":"Compile back office"},{"location":"developers/compilation/#compiling-sass-files-and-javascript-files","text":"You can compile the back office SASS files and JavaScript files using the following command: grunt build-admin It will generate source maps for both SASS files and JavaScript files. You can compile the back office without source maps using the following command (for production): grunt build-admin --production If you want the back office to be automatically compiled when a SASS file or a JavaScript file is changed use the following command: grunt watch:admin","title":"Compiling SASS files and JavaScript files"},{"location":"developers/conf/","text":"Introduction Some project's development configuration is made in conf.json file. Load libraries The list of libraries to load are defined in conf.json : libraries: [ { // The name of the library as defined in package.json file name: 'angular', // The mount path to use to access the library mountPath: 'angular-custom-mount-path', // The list of files to automatically load in the front office with paths relative to the library directory // Library will still be mounted even if there is no files to automatically load in the front office files: ['angular.min.js', 'angular-csp.css'] }, [...] ] Load front office JavaScript files The list of JavaScript files of the front office to load are defined in conf.json : { scriptLibFiles: { // List of JavaScript files to load first dev: [ // List of JavaScript files to load on development environment ... ], prod: [ // List of JavaScript files to load on production environment ... ] }, scriptFiles: { // List of JavaScript files to load next dev: [ // List of JavaScript files to load on development environment ... ], prod: [ // List of JavaScript files to load on production environment ... ] } } Load front office CSS files The list of CSS files to load are defined in conf.json : { cssFiles: [ // List of CSS files to load ... ] } Load back office JavaScript files Back office JavaScript files are loaded automatically, there is nothing to do about it. Load back office CSS files Back office CSS files are loaded automatically, there is nothing to do about it. Load back office libraries files Back office JavaScript and CSS files are loaded automatically however libraries used by the back office still need to be loaded in conf.json : { be : { libraries : [ // List of libraries to load { // The mount path of the library mounted in top level libraries property mountPath: 'angular', // The list of files to automatically load in the back office with paths relative to the library directory files: ['angular.min.js', 'angular-csp.css'] }, [...] ] } }","title":"conf.json"},{"location":"developers/conf/#introduction","text":"Some project's development configuration is made in conf.json file.","title":"Introduction"},{"location":"developers/conf/#load-libraries","text":"The list of libraries to load are defined in conf.json : libraries: [ { // The name of the library as defined in package.json file name: 'angular', // The mount path to use to access the library mountPath: 'angular-custom-mount-path', // The list of files to automatically load in the front office with paths relative to the library directory // Library will still be mounted even if there is no files to automatically load in the front office files: ['angular.min.js', 'angular-csp.css'] }, [...] ]","title":"Load libraries"},{"location":"developers/conf/#load-front-office-javascript-files","text":"The list of JavaScript files of the front office to load are defined in conf.json : { scriptLibFiles: { // List of JavaScript files to load first dev: [ // List of JavaScript files to load on development environment ... ], prod: [ // List of JavaScript files to load on production environment ... ] }, scriptFiles: { // List of JavaScript files to load next dev: [ // List of JavaScript files to load on development environment ... ], prod: [ // List of JavaScript files to load on production environment ... ] } }","title":"Load front office JavaScript files"},{"location":"developers/conf/#load-front-office-css-files","text":"The list of CSS files to load are defined in conf.json : { cssFiles: [ // List of CSS files to load ... ] }","title":"Load front office CSS files"},{"location":"developers/conf/#load-back-office-javascript-files","text":"Back office JavaScript files are loaded automatically, there is nothing to do about it.","title":"Load back office JavaScript files"},{"location":"developers/conf/#load-back-office-css-files","text":"Back office CSS files are loaded automatically, there is nothing to do about it.","title":"Load back office CSS files"},{"location":"developers/conf/#load-back-office-libraries-files","text":"Back office JavaScript and CSS files are loaded automatically however libraries used by the back office still need to be loaded in conf.json : { be : { libraries : [ // List of libraries to load { // The mount path of the library mounted in top level libraries property mountPath: 'angular', // The list of files to automatically load in the back office with paths relative to the library directory files: ['angular.min.js', 'angular-csp.css'] }, [...] ] } }","title":"Load back office libraries files"},{"location":"developers/end-to-end-tests/","text":"Introduction End to end tests are performed using Protractor . You need to have a running OpenVeo Web Service server before starting tests. WARNING : Each time you launch end to end tests, all information are removed from OpenVeo ! Launch OpenVeo Web Service with option --databaseConf to specify a test database. Install selenium web driver and chrome driver node_modules/grunt-protractor-runner/node_modules/protractor/bin/webdriver-manager update NB: Note that protractor module could be in node_modules/protractor Configure tests When launching tests, an OpenVeo Portal server is automatically spawned and must be configured through serverTestConf.json . Typically you may want to change the server port. ~/.openveo/core/serverTestConf.json { port : 3004, sessionSecret : 2bXELdIqoT9Tbv5i1RfcXGEIE+GQS+XYbwVn0qEx } In order not to drop your development openveo-portal database, you need to configure a test openveo-portal database through databaseTestConf.json . Typically you may want to change the database, username and password. ~/.openveo/core/databaseTestConf.json { type : mongodb , host : localhost , port : 27017, database : openveo-portal-test , username : openveo-test , password : openveo-test } You will also need to configure your server by editing options relative to end-to-end tests. You need a confTest.json to typically set your test options like publicFilter . ~/.openveo/core/confTest.json { theme : default , exposedFilter : [ ], categoriesFilter : , privateFilter : [ ], publicFilter : [ public ], cache : { filterTTL : 600, videoTTL : 60 }, useDialog : false } The logger has to be configured through loggerTestConf.json . Typically you may want to deactivate logger standard output. ~/.openveo/core/loggerTestConf.json { level : info , maxFileSize : 104857600, maxFiles : 2, fileName : /tmp/openveo-portal-test.log , console : false } console: false will deactivate standard output. Finally the Web Service has to be configured through webservicesTestConf.json . Typically you may want to have a different server. { path : http://127.0.0.1:3002 , certificate : , clientID : B1535kPqe , secretID : a058d8ff7420b84708bd1ff4bacb8e4c42424cd0 } Create test Create your test file in tests/client/e2eTests/ then update the list of suites, if necessary, in tests/client/e2eTests/protractorSuites.json . Debug If a test fails, a screenshot of the browser at the instant is taken and available in build/screenshots of the project. Launch end to end tests # Launch all end to end tests on chrome grunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"chrome\\\"}\" --directConnect=true # Launch all end to end tests on firefox grunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"firefox\\\"}\" --directConnect=true # Launch only portal suite on chrome grunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"chrome\\\"}\" --directConnect=true --suite=\"portal\"","title":"End to end tests"},{"location":"developers/end-to-end-tests/#introduction","text":"End to end tests are performed using Protractor . You need to have a running OpenVeo Web Service server before starting tests. WARNING : Each time you launch end to end tests, all information are removed from OpenVeo ! Launch OpenVeo Web Service with option --databaseConf to specify a test database.","title":"Introduction"},{"location":"developers/end-to-end-tests/#install-selenium-web-driver-and-chrome-driver","text":"node_modules/grunt-protractor-runner/node_modules/protractor/bin/webdriver-manager update NB: Note that protractor module could be in node_modules/protractor","title":"Install selenium web driver and chrome driver"},{"location":"developers/end-to-end-tests/#configure-tests","text":"When launching tests, an OpenVeo Portal server is automatically spawned and must be configured through serverTestConf.json . Typically you may want to change the server port. ~/.openveo/core/serverTestConf.json { port : 3004, sessionSecret : 2bXELdIqoT9Tbv5i1RfcXGEIE+GQS+XYbwVn0qEx } In order not to drop your development openveo-portal database, you need to configure a test openveo-portal database through databaseTestConf.json . Typically you may want to change the database, username and password. ~/.openveo/core/databaseTestConf.json { type : mongodb , host : localhost , port : 27017, database : openveo-portal-test , username : openveo-test , password : openveo-test } You will also need to configure your server by editing options relative to end-to-end tests. You need a confTest.json to typically set your test options like publicFilter . ~/.openveo/core/confTest.json { theme : default , exposedFilter : [ ], categoriesFilter : , privateFilter : [ ], publicFilter : [ public ], cache : { filterTTL : 600, videoTTL : 60 }, useDialog : false } The logger has to be configured through loggerTestConf.json . Typically you may want to deactivate logger standard output. ~/.openveo/core/loggerTestConf.json { level : info , maxFileSize : 104857600, maxFiles : 2, fileName : /tmp/openveo-portal-test.log , console : false } console: false will deactivate standard output. Finally the Web Service has to be configured through webservicesTestConf.json . Typically you may want to have a different server. { path : http://127.0.0.1:3002 , certificate : , clientID : B1535kPqe , secretID : a058d8ff7420b84708bd1ff4bacb8e4c42424cd0 }","title":"Configure tests"},{"location":"developers/end-to-end-tests/#create-test","text":"Create your test file in tests/client/e2eTests/ then update the list of suites, if necessary, in tests/client/e2eTests/protractorSuites.json .","title":"Create test"},{"location":"developers/end-to-end-tests/#debug","text":"If a test fails, a screenshot of the browser at the instant is taken and available in build/screenshots of the project.","title":"Debug"},{"location":"developers/end-to-end-tests/#launch-end-to-end-tests","text":"# Launch all end to end tests on chrome grunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"chrome\\\"}\" --directConnect=true # Launch all end to end tests on firefox grunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"firefox\\\"}\" --directConnect=true # Launch only portal suite on chrome grunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"chrome\\\"}\" --directConnect=true --suite=\"portal\"","title":"Launch end to end tests"},{"location":"developers/installation/","text":"Clone project from git cd /WORKSPACE_PATH/ git clone git@github.com:veo-labs/openveo-portal.git Install OpenVeo Portal dependencies cd /WORKSPACE_PATH/openveo-portal npm install Compile sources This will compile front office and back office sources. cd /WORKSPACE_PATH/openveo-portal grunt dist","title":"Installation"},{"location":"developers/installation/#clone-project-from-git","text":"cd /WORKSPACE_PATH/ git clone git@github.com:veo-labs/openveo-portal.git","title":"Clone project from git"},{"location":"developers/installation/#install-openveo-portal-dependencies","text":"cd /WORKSPACE_PATH/openveo-portal npm install","title":"Install OpenVeo Portal dependencies"},{"location":"developers/installation/#compile-sources","text":"This will compile front office and back office sources. cd /WORKSPACE_PATH/openveo-portal grunt dist","title":"Compile sources"},{"location":"developers/logger/","text":"Introduction All server logs are performed by module Winston . Use OpenVeo Portal logger By default OpenVeo Portal creates one logger named portal . You can use this logger using the following code: process.logger.silly('Silly log'); process.logger.debug('Debug log'); process.logger.verbose('Verbose log'); process.logger.info('Info log'); process.logger.warn('Warn log'); process.logger.error('Error log');","title":"Logger"},{"location":"developers/logger/#introduction","text":"All server logs are performed by module Winston .","title":"Introduction"},{"location":"developers/logger/#use-openveo-portal-logger","text":"By default OpenVeo Portal creates one logger named portal . You can use this logger using the following code: process.logger.silly('Silly log'); process.logger.debug('Debug log'); process.logger.verbose('Verbose log'); process.logger.info('Info log'); process.logger.warn('Warn log'); process.logger.error('Error log');","title":"Use OpenVeo Portal logger"},{"location":"developers/prerequisites/","text":"OpenVeo Portal requires additional elements for development: Git - openveo-portal is versioned with git Ruby / Sass / Compass - CSS is written using SASS / Compass Grunt - Grunt is used to launch development tasks (compilation, obfuscation, tests etc.) Karma - Back office AngularJS single page application is unit tested using karma Mkdocs - To generate this documentation","title":"Prerequisites"},{"location":"developers/unit-tests/","text":"AngularJS back office unit tests Client side unit tests are performed using Karma . You can launch back office unit tests with the following command: grunt unit-tests","title":"Unit tests"},{"location":"developers/unit-tests/#angularjs-back-office-unit-tests","text":"Client side unit tests are performed using Karma . You can launch back office unit tests with the following command: grunt unit-tests","title":"AngularJS back office unit tests"}]}