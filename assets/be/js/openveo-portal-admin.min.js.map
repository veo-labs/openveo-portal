{"version":3,"sources":["../app/client/admin/components/shared/i18n/i18n.module.js","../app/client/admin/components/shared/i18n/i18n.filter.js","../app/client/admin/index.module.js","../app/client/admin/components/shared/notification/notificationConfiguration.factory.js","../app/client/admin/components/dashboard/about/about.factory.js","../app/client/admin/components/shared/url.factory.js","../app/client/admin/components/dashboard/dashboard.controller.js","../app/client/admin/components/settings/liveSettings/liveSettings.controller.js","../app/client/admin/components/shared/actionsButton/actionsButton.controller.js","../app/client/admin/components/shared/info/infoConfiguration.factory.js","../app/client/admin/components/shared/infoButton/infoButton.controller.js","../app/client/admin/components/shared/mediaContainer/mediaContainer.controller.js","../app/client/admin/components/shared/mediaSelect/mediaOption/mediaOption.controller.js","../app/client/admin/components/shared/mediaSelect/mediaSelect.controller.js","../app/client/admin/components/shared/nav/nav.controller.js","../app/client/admin/components/shared/tags/tags.controller.js","../app/client/admin/components/shared/toolbar/toolbar.controller.js","../app/client/admin/components/shared/groups.factory.js","../app/client/admin/components/shared/i18n/i18n.factory.js","../app/client/admin/components/shared/info/info.directive.js","../app/client/admin/components/shared/interceptor.factory.js","../app/client/admin/components/shared/licenseKeyValidator/licenseKeyValidator.controller.js","../app/client/admin/components/shared/licenseKeyValidator/licenseKeyValidator.directive.js","../app/client/admin/components/shared/mediaLibraryDialog/mediaLibraryDialog.controller.js","../app/client/admin/components/shared/notification/notification.controller.js","../app/client/admin/components/shared/settings.factory.js","../app/client/admin/components/shared/streamUrlValidator/streamUrlValidator.controller.js","../app/client/admin/components/shared/streamUrlValidator/streamUrlValidator.directive.js","../app/client/admin/components/shared/user.factory.js","../app/client/admin/components/shared/videos.factory.js","../app/client/admin/components/shared/notification/notification.factory.js","../app/client/admin/components/promotedVideos/promotedVideos.controller.js","../app/client/admin/components/settings/settings.controller.js","../app/client/admin/index.controller.js","../app/client/admin/components/promotedVideos/promotedVideos.component.js","../app/client/admin/components/settings/settings.component.js","../app/client/admin/components/dashboard/about/about.controller.js","../app/client/admin/components/dashboard/about/about.component.js","../app/client/admin/components/shared/mediaLibrary/mediaLibrary.controller.js","../app/client/admin/components/shared/mediaLibrary/mediaLibrary.component.js","../app/client/admin/components/dashboard/dashboard.component.js","../app/client/admin/components/settings/liveSettings/liveSettings.component.js","../app/client/admin/components/shared/actionsButton/actionsButton.component.js","../app/client/admin/components/shared/info/info.controller.js","../app/client/admin/components/shared/infoButton/infoButton.component.js","../app/client/admin/components/shared/mediaContainer/mediaContainer.component.js","../app/client/admin/components/shared/mediaSelect/mediaOption/mediaOption.component.js","../app/client/admin/components/shared/mediaSelect/mediaSelect.component.js","../app/client/admin/components/shared/nav/nav.component.js","../app/client/admin/components/shared/tags/tags.component.js","../app/client/admin/components/shared/toolbar/toolbar.component.js"],"names":["angular","module","app","OpaTranslateFilter","$sce","opaTranslations","id","number","parameters","toUpperCase","properties","split","translation","property","parseInt","i","length","isNaN","reg","RegExp","Object","keys","join","replace","matched","trustAsHtml","filter","$inject","constant","config","$routeProvider","$locationProvider","$logProvider","$httpProvider","$mdThemingProvider","when","template","pageTitle","title","pageInfo","otherwise","html5Mode","debugEnabled","interceptors","push","definePalette","50","100","200","300","400","500","600","700","800","900","A100","A200","A400","A700","contrastDefaultColor","contrastLightColors","theme","primaryPalette","default","hue-1","hue-2","hue-3","accentPalette","run","$filter","opaInfoConfiguration","opaNotificationConfiguration","setOptions","closeLabel","closeAriaLabel","element","document","ready","bootstrap","strictDi","OpaNotificationConfiguration","self","this","defineProperties","options","value","getOptions","factory","OpaAboutFactory","$http","opaWebServiceBasePath","getInfo","get","OpaUrlFactory","setUrlParameter","url","parameter","anchor","finalUrl","parametersQueryString","parametersStrings","urlChunks","match","TypeError","forEach","parameterString","urlParameter","name","OpaDashboardController","$scope","ctrl","$onInit","$emit","controller","OpaLiveSettingsController","availablePlayers","liveSwitchMessage","writable","urlErrorMessage","settings","$onChanges","changedProperties","opaSettings","currentValue","copy","activated","undefined","playerType","wowza","playerLicenseKey","private","groups","updateLiveSwitchMessage","updateUrlErrorMessage","callUpdate","$postLink","isValid","opaOnUpdate","isActivated","opaLiveSettings","$valid","$watch","newValue","oldValue","OpaActionsButtonController","$element","$window","$document","isOpened","toggleActions","actionsWrapperElement","querySelector","height","actionsElement","find","computedStyle","getComputedStyle","parseFloat","getPropertyValue","style","handleActionKeypress","event","action","keyCode","OpaInfoConfiguration","OpaInfoButtonController","OpaMediaContainerController","onClick","opaEdit","onRemove","$event","stopImmediatePropagation","opaRemove","OpaMediaOptionController","isChecked","hasOwnProperty","opaChecked","opaFocus","focus","updateSelect","selectCtrl","check","opaMedia","uncheck","onBlur","opaBlur","OpaMediaSelectController","index","selection","multiple","checkboxesStates","focusStates","keepFocus","isInitialized","opaMultiple","Array","isArray","ngModel","setCheckboxesStates","setFocusStates","media","opaMedias","indexOf","splice","optionFocus","KeyboardEvent","prototype","isPrototypeOf","children","addClass","newIndex","curIndex","removeClass","OpaNavController","handleItemKeypress","item","OpaTagsController","updateAttributes","opaAvailableTags","getValues","tags","values","stopEvent","stopPropagation","preventDefault","inputNgModelController","autoCompleteElement","inputElement","ngModelController","mdInputContainerController","autoCompleteFocusedIndex","isRequired","tag","autoCompleteValues","isAutoCompleteDisplayed","on","$validators","opaTags","modelValue","viewValue","isEmpty","$touched","$onDestroy","off","ngRequired","label","toggleClass","setInvalid","autoComplete","toLowerCase","removeTag","$setViewValue","$validate","handleAutoCompleteKeys","tagName","direction","querySelectorAll","addTag","handleInputKeys","invalidateUntouched","$isEmpty","$render","$viewValue","OpaToolbarController","$mdMedia","OpaGroupsFactory","getGroups","OpaI18nFactory","getLanguages","openVeoPortalSettings","languages","opaInfo","restrict","scope","message","controllerAs","bindToController","directive","OpaInterceptor","$rootScope","$q","getErrorMessage","error","errorCode","data","code","status","request","test","responseError","rejection","$broadcast","authenticationError","timeout","reject","OpaLicenseKeyValidatorController","opaLicenseKey","opaLicenseKeyValidator","require","OpaMediaLibraryDialogController","$mdDialog","dialogSizeClass","cancel","close","hide","OpaNotificationController","$mdToast","OpaSettingsFactory","getSetting","settingId","updateSetting","post","OpaStreamUrlValidatorController","isValidYoutubeStreamUrl","isValidWowzaStreamUrl","isValidVodalysStreamUrl","opaStreamUrl","opaStreamUrlValidator","opaType","OpaUserFactory","$cookies","getUserInfo","user","isAuthenticated","logout","getLanguage","language","setLanguage","newLanguage","put","navigator","browserLanguage","OpaVideosFactory","getVideo","getPromotedVideos","OpaNotificationFactory","displayNotification","delay","Math","max","show","build","hideDelay","templateUrl","locals","closeButton","defaultOptions","OpaPromotedVideosController","opaSettingsFactory","opaVideosFactory","opaNotificationFactory","opaUrlFactory","isError","isSaving","promotedVideos","containers","containersClass","then","result","preview","thumbnail","getContainersTemplate","openMediaLibraryDialog","container","response","mediaId","entity","clearContainer","save","OpaSettingsController","opaGroupsFactory","liveSettingsController","mdContentController","availableGroups","liveSettings","all","results","entities","group","$on","updateLiveSettings","OpaIndexController","$route","$location","$mdSidenav","opaUserFactory","opaI18nFactory","translateFilter","page","adminTitle","menuLinks","toolbarLeftActions","toolbarRightActions","advancedToolbarRightActions","advancedToolbarLanguageActions","toolbarPageInfo","type","accessibility","help","navMenu","advancedNavMenu","userLanguage","isViewLoaded","init","navLanguagesActions","navDashboardAction","icon","goTo","href","navSettingsAction","navPromotedVideosAction","selected","toggleSideNavigation","goToPortal","menu","divider","actions","path","closeSideNavigation","location","toggle","selectMenuItem","selectItem","navItem","next","route","originalPath","component","bindings","OpaAboutController","opaAboutFactory","information","isLoaded","info","%version%","version","%versionUrl%","versionReleaseUrl","%latestVersion%","latestVersion","%latestVersionUrl%","latestVersionReleaseUrl","OpaMediaLibraryController","medias","keyword","sortField","sortDirection","triggered","limit","currentPage","totalPages","isLoading","opaResultsPerPage","select","parent","progress","scrollTop","scrollHeight","clientHeight","addNextPage","search","fetch","pagination","pages","concat","callback","sortBy","sortOrder","include","query","opaGroups","opaLabel","opaIcon","opaActions","OpaInfoController","$timeout","$mdPanel","panelReference","panelPromise","panelPosition","newPanelPosition","open","attachTo","body","escapeToClose","clickOutsideToClose","position","onCloseSuccess","reference","relativeTo","addPanelPosition","xPosition","ALIGN_START","yPosition","BELOW","opaMessage","opaAccessibility","opaHelp","opaTitle","opaMenu","opaLeftActions","opaRightActions"],"mappings":"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","file":"openveo-portal-admin.min.js","sourcesContent":["'use strict';\n\n/**\n * Set of tools to handle internationalization.\n *\n * @module opa.i18n\n * @main opa.i18n\n */\n\n/**\n * Offer internationalization utilities.\n */\n\n(function(angular) {\n  angular.module('opa.i18n', []);\n})(angular);\n","'use strict';\n\n/**\n * @module opa.i18n\n */\n\n(function(app) {\n\n  /**\n   * Translate filter to translate an id using a dictionary of translations.\n   *\n   * @class OpaTranslateFilter\n   * @constructor\n   * @param {Object} $sce AngularJS $sce service\n   * @param {Object} opaTranslations The list of OpenVeo Portal translations\n   */\n  function OpaTranslateFilter($sce, opaTranslations) {\n\n    /**\n     * Translates an id into the appropriated translated text.\n     *\n     * @example\n     *     // Translation dictionary\n     *     var translations = {\n     *       MY_SIMPLE_TRANSLATION_ID: 'Simple translation',\n     *       MY_TRANSLATION_ID: {\n     *         SINGLE: 'Single translation',\n     *         PLURAL: 'Plural translation'\n     *       },\n     *       MY_TRANSLATION_WITH_PARAMETERS_ID: 'Translation with \"%parameter%\"'\n     *     };\n     *\n     *     $scope.translationParameters = {\n     *       '%parameter%': 'my value'\n     *     };\n     *\n     * @example\n     *     <!-- Simple translation -->\n     *     <p>{{'MY_SIMPLE_TRANSLATION_ID' | opaTranslate}}</p>\n     *\n     *     <!-- Single translation -->\n     *     <p>{{'MY_TRANSLATION_ID' | opaTranslate:0}}</p>\n     *\n     *     <!-- Single translation -->\n     *     <p>{{'MY_TRANSLATION_ID' | opaTranslate:1}}</p>\n     *\n     *     <!-- Plural translation -->\n     *     <p>{{'MY_TRANSLATION_ID' | opaTranslate:2}}</p>\n     *\n     *     <!-- Translation with \"my value\" -->\n     *     <p>{{'MY_TRANSLATION_WITH_PARAMETERS_ID' | opaTranslate:0:translationParameters}}</p>\n     *\n     * @method opaTranslate\n     * @param {String} id The id of the translation\n     * @param {Number} [number] The number to determine pluralization\n     * @param {Object} [parameters] Placeholder to replace with their values\n     * @return {Object|null} The wrapped version of the translated string that can be used as a\n     * trusted variant in $sce.HTML context\n     */\n    return function(id, number, parameters) {\n      if (id) {\n        id = id.toUpperCase();\n        var properties = id.split('.');\n        var translation = id;\n        var property = opaTranslations;\n        number = parseInt(number);\n\n        // Nested search\n        for (var i = 0; i < properties.length; i++) {\n          if (property[properties[i]])\n            property = property[properties[i]];\n        }\n\n        // Pluralization\n        if (typeof property === 'object' &&\n            !isNaN(number) &&\n            'SINGLE' in property &&\n            'PLURAL' in property\n        ) {\n          property = (number > 1) ? property['PLURAL'] : property['SINGLE'];\n        }\n\n        translation = (typeof property === 'string') ? property : id;\n\n        // Parameters\n        if (parameters) {\n          var reg = new RegExp(Object.keys(parameters).join('|'), 'gi');\n          translation = translation.replace(reg, function(matched) {\n            return parameters[matched];\n          });\n        }\n        return $sce.trustAsHtml(translation);\n      }\n\n      return null;\n    };\n\n  }\n\n  app.filter('opaTranslate', OpaTranslateFilter);\n  OpaTranslateFilter.$inject = ['$sce', 'opaTranslations'];\n\n})(angular.module('opa.i18n'));\n","'use strict';\n\n/**\n * OpenVeo Portal AngularJS module to manage administration interface.\n *\n * opa (for OpenVeo Portal Admin) module holds all components of the OpenVeo Portal administration interface.\n * It also defines opaWebServiceBasePath constant holding the base path of the Web Service.\n *\n * @module opa\n * @main opa\n */\n\n(function(angular) {\n\n  /**\n   * Main module of the OpenVeo Portal administration interface.\n   *\n   * Requires:\n   * - **ngRoute** AngularJS route module\n   * - **ngAnimate** AngularJS animate module\n   * - **ngAria** AngularJS ARIA module\n   * - **ngCookies** AngularJS Cookies module\n   * - **ngMessages** AngularJS Messages module\n   * - **ngMaterial** AngularJS Material module\n   * - **opa.i18n** OpenVeo Portal internationalization module\n   * - **opa.locale** OpenVeo Portal translations\n   */\n  var app = angular.module('opa', [\n    'ngRoute',\n    'ngAnimate',\n    'ngMaterial',\n    'ngAria',\n    'ngCookies',\n    'ngMessages',\n    'opa.i18n',\n    'opa.locale'\n  ]);\n\n  app.constant('opaWebServiceBasePath', '/ws/');\n\n  app.config(['$routeProvider', '$locationProvider', '$logProvider', '$httpProvider', '$mdThemingProvider',\n    function($routeProvider, $locationProvider, $logProvider, $httpProvider, $mdThemingProvider) {\n\n      // Register dashboard page route\n      $routeProvider.when('/', {\n        template: '<opa-dashboard flex layout=\"row\"></opa-dashboard>',\n        pageTitle: 'DASHBOARD.PAGE_TITLE',\n        title: 'DASHBOARD.TITLE',\n        pageInfo: 'DASHBOARD.INFO'\n      }).otherwise('/');\n\n      // Register \"Promoted videos\" page route\n      $routeProvider.when('/promoted-videos', {\n        template: '<opa-promoted-videos flex layout=\"row\"></opa-promoted-videos>',\n        pageTitle: 'PROMOTED_VIDEOS.PAGE_TITLE',\n        title: 'PROMOTED_VIDEOS.TITLE',\n        pageInfo: 'PROMOTED_VIDEOS.INFO'\n      });\n\n      // Register settings page route\n      $routeProvider.when('/settings', {\n        template: '<opa-settings flex layout=\"row\"></opa-settings>',\n        pageTitle: 'SETTINGS.PAGE_TITLE',\n        title: 'SETTINGS.TITLE',\n        pageInfo: 'SETTINGS.INFO'\n      });\n\n      $locationProvider.html5Mode(true);\n      $logProvider.debugEnabled(false);\n      $httpProvider.interceptors.push('opaInterceptor');\n\n      // OpenVeo Portal Admin blue\n      $mdThemingProvider.definePalette('opaBlue', {\n        50: 'f5f8ff',\n        100: 'e5eeff',\n        200: 'bde1f5',\n        300: '7ec2e7',\n        400: '58b3e4',\n        500: '1a91d1',\n        600: '1a8dcb',\n        700: '1f7bad',\n        800: '1a6c99',\n        900: '155d84',\n        A100: '80d2ff',\n        A200: '52c2ff',\n        A400: '1aafff',\n        A700: '008bd6',\n        contrastDefaultColor: 'dark',\n        contrastLightColors: ['500', '700', '800', '900']\n      });\n\n      // OpenVeo Portal Admin pink\n      $mdThemingProvider.definePalette('opaPink', {\n        50: 'fff5fe',\n        100: 'ffe5eb',\n        200: 'f5bddc',\n        300: 'e77eb8',\n        400: 'e458a5',\n        500: 'e6007e',\n        600: 'cb1a7c',\n        700: 'ad1f6d',\n        800: '991a60',\n        900: '841552',\n        A100: 'ff80c6',\n        A200: 'ff52b1',\n        A400: 'ff1a98',\n        A700: 'd60076',\n        contrastDefaultColor: 'dark',\n        contrastLightColors: ['500', '600', '700', '800', '900', 'A700']\n      });\n\n      $mdThemingProvider.theme('default').primaryPalette('opaBlue', {\n        default: '500',\n        'hue-1': '300',\n        'hue-2': '800',\n        'hue-3': 'A100'\n      });\n      $mdThemingProvider.theme('default').accentPalette('opaPink', {\n        default: 'A200',\n        'hue-1': 'A100',\n        'hue-2': 'A400',\n        'hue-3': 'A700'\n      });\n\n    }]);\n\n  app.run([\n    '$filter',\n    'opaInfoConfiguration',\n    'opaNotificationConfiguration',\n    function($filter, opaInfoConfiguration, opaNotificationConfiguration) {\n      opaInfoConfiguration.setOptions({\n        closeLabel: $filter('opaTranslate')('INFO.CLOSE'),\n        closeAriaLabel: $filter('opaTranslate')('INFO.CLOSE_ACCESSIBILITY')\n      });\n\n      opaNotificationConfiguration.setOptions({\n        closeLabel: $filter('opaTranslate')('NOTIFICATION.CLOSE'),\n        closeAriaLabel: $filter('opaTranslate')('NOTIFICATION.CLOSE_ACCESSIBILITY')\n      });\n    }\n  ]);\n\n  angular.element(document).ready(function() {\n    angular.bootstrap(document, ['opa'], {strictDi: true});\n  });\n\n})(angular);\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Manages OPA notifications default configuration.\n   *\n   * @class opaNotificationConfiguration\n   */\n  function OpaNotificationConfiguration() {\n    var self = this;\n\n    Object.defineProperties(this, {\n\n      /**\n       * The default options for all notifications.\n       *\n       * @property options\n       * @type Object\n       * @final\n       */\n      options: {\n        value: {}\n      },\n\n      /**\n       * Sets default options for all notifications.\n       *\n       * @method setOptions\n       * @param {Object} options Notifications options\n       * @param {String} [options.closeLabel] Notifications close button label\n       * @param {String} [options.closeAriaLabel] Notifications close button ARIA label\n       * @final\n       */\n      setOptions: {\n        value: function(options) {\n          if (options.closeLabel) self.options.closeLabel = options.closeLabel;\n          if (options.closeAriaLabel) self.options.closeAriaLabel = options.closeAriaLabel;\n        }\n      },\n\n      /**\n       * Gets default options for all notifications.\n       *\n       * @method getOptions\n       * @return {Object} Notifications default options\n       * @final\n       */\n      getOptions: {\n        value: function() {\n          return self.options;\n        }\n      }\n    });\n\n    return {\n      getOptions: this.getOptions,\n      setOptions: this.setOptions\n    };\n  }\n\n  app.factory('opaNotificationConfiguration', OpaNotificationConfiguration);\n  OpaNotificationConfiguration.$inject = [];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Manages information about actual version of OpenVeo Portal.\n   *\n   * @class OpaAboutFactory\n   * @param {Object} $http AngularJS $http service\n   * @param {String} opaWebServiceBasePath Portal web service base path\n   */\n  function OpaAboutFactory($http, opaWebServiceBasePath) {\n\n    /**\n     * Gets information about OpenVeo Portal.\n     *\n     * @return {HttpPromise} An AngularJS promise resolving with an object containing:\n     *   - [String] **latestVersion** Latest OpenVeo Portal version available\n     *   - [String] **latestVersionUrl** Latest OpenVeo Portal version release note url\n     *   - [Boolean] **updateAvailable** true if a new version of OpenVeo Portal is available, false otherwise\n     *   - [String] **version** The actual version of OpenVeo Portal\n     *   - [String] **versionReleaseUrl** Actual OpenVeo Portal version release note url\n     *   - [String] **versionSourcesUrl** Actual OpenVeo Portal version sources url\n     * @method getInfo\n     */\n    function getInfo() {\n      return $http.get(opaWebServiceBasePath + 'version');\n    }\n\n    return {\n      getInfo: getInfo\n    };\n\n  }\n\n  app.factory('opaAboutFactory', OpaAboutFactory);\n  OpaAboutFactory.$inject = ['$http', 'opaWebServiceBasePath'];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Offers helpers to manipulate URLs as Internet Explorer does not implement URL.\n   *\n   * @class OpaUrlFactory\n   */\n  function OpaUrlFactory() {\n\n    /**\n     * Sets a query parameter of an URL.\n     *\n     * @method setUrlParameter\n     * @param {String} url The URL to modify\n     * @param {String} parameter The name of the parameter to add\n     * @param {String} value The value of the parameter to add\n     * @return {String} The new computed URL\n     */\n    function setUrlParameter(url, parameter, value) {\n\n      // JavaScript URL is not well implemented in Internet Explorer\n      // This has to be replaced when Internet Explorer won't be supported anymore\n      var parameters = {};\n      var parametersStrings = [];\n      var anchor;\n      var finalUrl;\n      var parametersQueryString;\n\n      // Parse the URL\n      var urlChunks = url.match(/([^?#]*)(?:\\?([^#]*))?(?:#(.*))?/);\n      if (!urlChunks) throw new TypeError(url + ' is not a valid URL');\n\n      finalUrl = urlChunks[1];\n      parametersQueryString = urlChunks[2];\n      anchor = urlChunks[3];\n\n      // Parse query parameters\n      if (parametersQueryString) {\n        parametersStrings = parametersQueryString.split('&');\n\n        parametersStrings.forEach(function(parameterString) {\n          var urlParameter = parameterString.split('=');\n          parameters[urlParameter[0]] = urlParameter[1];\n        });\n      }\n\n      // Add new parameter\n      parameters[parameter] = value;\n\n      // Build query parameters string\n      parametersStrings = [];\n      for (var name in parameters) {\n        parametersStrings.push(name + '=' + parameters[name]);\n      }\n\n      // Build the URL\n      if (parametersStrings.length) finalUrl += '?' + parametersStrings.join('&');\n      if (anchor) finalUrl += '#' + anchor;\n\n      return finalUrl;\n    }\n\n    return {\n      setUrlParameter: setUrlParameter\n    };\n\n  }\n\n  app.factory('opaUrlFactory', OpaUrlFactory);\n  OpaUrlFactory.$inject = [];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Manages opaDashboard component.\n   *\n   * @class OpaDashboardController\n   * @constructor\n   * @param {Object} $scope The component isolated scope\n   */\n  function OpaDashboardController($scope) {\n    var ctrl = this;\n\n    Object.defineProperties(ctrl, {\n\n      /**\n       * Initializes controller and informs when component is loaded.\n       *\n       * @method $onInit\n       * @final\n       */\n      $onInit: {\n        value: function() {\n          $scope.$emit('opaViewLoaded');\n        }\n      }\n\n    });\n  }\n\n  app.controller('OpaDashboardController', OpaDashboardController);\n  OpaDashboardController.$inject = ['$scope'];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Manages opaLiveSettings component.\n   *\n   * @class OpaLiveSettingsController\n   * @param {Object} $scope The component isolated scope\n   * @constructor\n   */\n  function OpaLiveSettingsController($scope) {\n    var ctrl = this;\n\n    Object.defineProperties(ctrl, {\n\n      /**\n       * The list of available player types.\n       *\n       * @property availablePlayers\n       * @type Array\n       * @final\n       */\n      availablePlayers: {\n        value: [\n          {\n            id: 'wowza',\n            name: 'SETTINGS.LIVE.WOWZA'\n          },\n          {\n            id: 'youtube',\n            name: 'SETTINGS.LIVE.YOUTUBE'\n          },\n          {\n            id: 'vodalys',\n            name: 'SETTINGS.LIVE.VODALYS'\n          }\n        ]\n      },\n\n      /**\n       * Message which indicates if live is activated or not.\n       *\n       * @property liveSwitchMessage\n       * @type String\n       */\n      liveSwitchMessage: {\n        value: null,\n        writable: true\n      },\n\n      /**\n       * Error message if url does not respect the player type format.\n       *\n       * @property urlErrorMessage\n       * @type String\n       */\n      urlErrorMessage: {\n        value: null,\n        writable: true\n      },\n\n      /**\n       * Live settings.\n       *\n       * @property settings\n       * @type Object\n       */\n      settings: {\n        value: {},\n        writable: true\n      },\n\n      /**\n       * Handles one-way binding properties changes.\n       *\n       * Validate settings and set default values.\n       *\n       * @method $onChanges\n       * @param {Object} changedProperties Properties which have changed since last digest loop\n       * @param {Object} [changedProperties.opaSettings] opa-settings old and new value\n       * @param {Boolean} [changedProperties.opaSettings.currentValue] opa-settings new value\n       * @final\n       */\n      $onChanges: {\n        value: function(changedProperties) {\n          if (changedProperties.opaSettings && changedProperties.opaSettings.currentValue) {\n            var settings = angular.copy(changedProperties.opaSettings.currentValue);\n            ctrl.settings.activated = settings.activated === undefined ? false : settings.activated;\n            ctrl.settings.playerType = settings.playerType || ctrl.availablePlayers[0].id;\n            ctrl.settings.url = settings.url || null;\n            ctrl.settings.wowza = settings.wowza || {};\n            ctrl.settings.wowza.playerLicenseKey = (settings.wowza && settings.wowza.playerLicenseKey) || null;\n            ctrl.settings.private = settings.private === undefined ? false : settings.private;\n            ctrl.settings.groups = settings.groups || [];\n\n            // Update live switch message\n            ctrl.updateLiveSwitchMessage(ctrl.settings.activated);\n\n            // Update live url error message\n            ctrl.updateUrlErrorMessage(ctrl.settings.playerType);\n\n            ctrl.callUpdate();\n          }\n        }\n      },\n\n      /**\n       * Emits an 'opaLiveSettingsLinked' when component is linked.\n       *\n       * @method $postLink\n       * @final\n       */\n      $postLink: {\n        value: function() {\n          $scope.$emit('opaLiveSettingsLinked', {controller: ctrl});\n        }\n      },\n\n      /**\n       * Executes opa-on-update function with settings if form is valid.\n       *\n       * @method callUpdate\n       * @final\n       */\n      callUpdate: {\n        value: function() {\n          if (ctrl.isValid() && ctrl.opaOnUpdate)\n            ctrl.opaOnUpdate({settings: ctrl.settings});\n        }\n      },\n\n      /**\n       * Updates the label of the switch element to activate / deactivate live.\n       *\n       * @method updateLiveSwitchMessage\n       * @param {Boolean} isActivated true if activated, false otherwise\n       * @final\n       */\n      updateLiveSwitchMessage: {\n        value: function(isActivated) {\n          ctrl.liveSwitchMessage = isActivated ? 'SETTINGS.LIVE.ACTIVATED_LABEL' : 'SETTINGS.LIVE.DEACTIVATED_LABEL';\n        }\n      },\n\n      /**\n       * Updates the url error message depending on player type.\n       *\n       * @method updateUrlErrorMessage\n       * @param {String} playerType The player type (either \"youtube\", \"wowza\" or \"vodalys\")\n       * @final\n       */\n      updateUrlErrorMessage: {\n        value: function(playerType) {\n          ctrl.urlErrorMessage = 'SETTINGS.LIVE.URL_' + playerType.toUpperCase() + '_ERROR';\n        }\n      },\n\n      /**\n       * Tests if settings are valid.\n       *\n       * @method isValid\n       * @return {Boolean} true if valid, false otherwise\n       * @final\n       */\n      isValid: {\n        value: function() {\n          return ($scope.opaLiveSettings) ? $scope.opaLiveSettings.$valid : true;\n        }\n      }\n\n    });\n\n    // Execute opa-on-update function if settings change\n    $scope.$watch('$ctrl.opaSettings', function(newValue, oldValue) {\n      ctrl.callUpdate();\n    }, true);\n  }\n\n  app.controller('OpaLiveSettingsController', OpaLiveSettingsController);\n  OpaLiveSettingsController.$inject = ['$scope'];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Manages opaActionsButton component.\n   *\n   * @class OpaActionsButtonController\n   * @constructor\n   * @param {Object} $element The HTML element holding the component\n   * @param {Object} $window JQLite element of the window\n   * @param {Object} $document JQLite element of the document\n   */\n  function OpaActionsButtonController($element, $window, $document) {\n    var ctrl = this;\n\n    Object.defineProperties(ctrl, {\n\n      /**\n       * Indicates if the list of actions is visible or not.\n       *\n       * @property isOpened\n       * @type Boolean\n       */\n      isOpened: {\n        value: false,\n        writable: true\n      },\n\n      /**\n       * Shows / hides actions.\n       *\n       * @method toggleActions\n       * @final\n       */\n      toggleActions: {\n        value: function() {\n          var actionsWrapperElement = $element[0].querySelector('.opa-actions-wrapper');\n          ctrl.isOpened = !ctrl.isOpened;\n\n          if (ctrl.isOpened) {\n            var height;\n            var actionsElement = $element.find('ul')[0];\n            var computedStyle = $window.getComputedStyle(actionsElement);\n            height = parseFloat(computedStyle.getPropertyValue('height') || computedStyle['height']);\n            if (!height) height = actionsElement['offsetHeight'];\n\n            actionsWrapperElement.style.height = height + 'px';\n          } else\n            actionsWrapperElement.style.height = '0px';\n        }\n      },\n\n      /**\n       * Handles keypress events on actions.\n       *\n       * @method handleActionKeypress\n       * @final\n       * @param {Event} event The keypress event\n       * @param {Object} action The action receiving the event\n       */\n      handleActionKeypress: {\n        value: function(event, action) {\n          if (event.keyCode === 13) {\n\n            // Captured \"enter\" key\n\n            // Execute action associated action\n            action.action(action);\n\n          }\n        }\n      }\n\n    });\n\n  }\n\n  app.controller('OpaActionsButtonController', OpaActionsButtonController);\n  OpaActionsButtonController.$inject = ['$element', '$window', '$document'];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Manages opa-info default configuration.\n   *\n   * @class opaInfoConfiguration\n   */\n  function OpaInfoConfiguration() {\n    var self = this;\n\n    Object.defineProperties(this, {\n\n      /**\n       * The default options for the opa-info directives.\n       *\n       * @property options\n       * @type Object\n       * @final\n       */\n      options: {\n        value: {}\n      },\n\n      /**\n       * Sets default options for the opa-info directives.\n       *\n       * @method setOptions\n       * @param {Object} options opa-info directive options\n       * @param {String} [options.closeLabel] opa-info close button label\n       * @param {String} [options.closeAriaLabel] opa-info close button ARIA label\n       * @final\n       */\n      setOptions: {\n        value: function(options) {\n          if (options.closeLabel) self.options.closeLabel = options.closeLabel;\n          if (options.closeAriaLabel) self.options.closeAriaLabel = options.closeAriaLabel;\n        }\n      },\n\n      /**\n       * Gets default options for the opa-info directives.\n       *\n       * @method getOptions\n       * @return {Object} opa-info directive default options\n       * @final\n       */\n      getOptions: {\n        value: function() {\n          return self.options;\n        }\n      }\n    });\n\n    return {\n      getOptions: this.getOptions,\n      setOptions: this.setOptions\n    };\n  }\n\n  app.factory('opaInfoConfiguration', OpaInfoConfiguration);\n  OpaInfoConfiguration.$inject = [];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Manages opaInfoButton component.\n   *\n   * @class OpaInfoButtonController\n   * @constructor\n   */\n  function OpaInfoButtonController() {}\n\n  app.controller('OpaInfoButtonController', OpaInfoButtonController);\n  OpaInfoButtonController.$inject = [];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Manages opaMediaContainer component.\n   *\n   * @class OpaMediaContainerController\n   */\n  function OpaMediaContainerController() {\n    var self = this;\n\n    Object.defineProperties(self, {\n\n      /**\n       * Trigger the edit callback to select a new media.\n       *\n       * @method onClick\n       * @final\n       */\n      onClick: {\n        value: function() {\n          self.opaEdit();\n        }\n      },\n\n      /**\n       * Trigger the remove action to clear the media.\n       *\n       * @method onRemove\n       * @final\n       */\n      onRemove: {\n        value: function($event) {\n          $event.stopImmediatePropagation();\n          self.opaRemove();\n        }\n      }\n\n    });\n  }\n\n  app.controller('OpaMediaContainerController', OpaMediaContainerController);\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n(function(app) {\n\n  /**\n   * Manages opaMediaOption component.\n   *\n   * @class OpaMediaOptionController\n   */\n  function OpaMediaOptionController($element) {\n    var self = this;\n\n    Object.defineProperties(self, {\n\n      /**\n       * Indicates if the media is checked or not.\n       *\n       * @property isChecked\n       * @type Boolean\n       */\n      isChecked: {\n        value: false,\n        writable: true\n      },\n\n      /**\n       * Handles one-way binding properties changes.\n       *\n       * Watch for checkboxes state changes\n       *\n       * @method $onChanges\n       * @param {Object} changedProperties Properties which have changed since last digest loop\n       * @final\n       */\n      $onChanges: {\n        value: function(changedProperties) {\n          if (changedProperties.hasOwnProperty('opaChecked'))\n            self.isChecked = self.opaChecked;\n\n          if (changedProperties.hasOwnProperty('opaFocus') && self.opaFocus === true) {\n            $element.find('md-checkbox')[0].focus();\n          }\n        }\n      },\n\n      /**\n       * Update the parent select when the checkbox is changed.\n       *\n       * @method updateSelect\n       * @final\n       */\n      updateSelect: {\n        value: function() {\n          if (self.isChecked)\n            self.selectCtrl.check(self.opaMedia);\n          else\n            self.selectCtrl.uncheck(self.opaMedia);\n        }\n      },\n\n      /**\n       * Launch opaBlur() binding callback\n       *\n       * @method opaBlur\n       * @final\n       */\n      onBlur: {\n        value: function() {\n          self.opaBlur();\n        }\n      }\n\n    });\n\n  }\n\n  app.controller('OpaMediaOptionController', OpaMediaOptionController);\n  OpaMediaOptionController.$inject = ['$element'];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Manages opaMediaSelect component.\n   *\n   * @class OpaMediaSelectController\n   * @constructor\n   */\n  function OpaMediaSelectController($element) {\n    var self = this;\n    var index;\n\n    Object.defineProperties(self, {\n\n      /**\n       * The list of selected medias.\n       *\n       * @property selection\n       * @type Array\n       */\n      selection: {\n        value: [],\n        writable: true\n      },\n\n      /**\n       * Defines if the model can contains one or many medias.\n       *\n       * @property multiple\n       * @type Boolean\n       */\n      multiple: {\n        value: false,\n        writable: true\n      },\n\n      /**\n       * Checkboxes states.\n       *\n       * @property checkboxesStates\n       * @type Array\n       */\n      checkboxesStates: {\n        value: [],\n        writable: true\n      },\n\n      /**\n        * Focus states.\n       *\n       * @property focusStates\n       * @type Array\n       */\n      focusStates: {\n        value: [],\n        writable: true\n      },\n\n      /**\n       * Locks the focus when navigating between opaMediaOptions.\n       *\n       * @property keepFocus\n       * @type Boolean\n       */\n      keepFocus: {\n        value: false,\n        writable: true\n      },\n\n      /**\n       * Controller initialization state.\n       *\n       * The initialization of the checkboxes states can't be done before\n       * the controller initialization is completed.\n       *\n       * @property isInitialized\n       * @type Boolean\n       */\n      isInitialized: {\n        value: false,\n        writable: true\n      },\n\n      /**\n       * Initializes controller.\n       *\n       * @method $onInit\n       * @final\n       */\n      $onInit: {\n        value: function() {\n          self.multiple = self.opaMultiple || Array.isArray(self.ngModel);\n\n          if (self.ngModel)\n            self.selection = self.multiple ? self.ngModel : [self.ngModel];\n\n          self.setCheckboxesStates();\n          self.isInitialized = true;\n        }\n      },\n\n      /**\n       * Handles one-way binding properties changes.\n       *\n       * @method $onChanges\n       * @param {Object} changedProperties Properties which have changed since last digest loop\n       * @final\n       */\n      $onChanges: {\n        value: function(changedProperties) {\n          if (changedProperties.hasOwnProperty('opaMedias') && self.isInitialized) {\n            self.setCheckboxesStates();\n            self.setFocusStates();\n          }\n        }\n      },\n\n      /**\n       * Add a media to the selection.\n       *\n       * @method check\n       * @param {Object} media\n       * @final\n       */\n      check: {\n        value: function(media) {\n          index = self.opaMedias.indexOf(media);\n          if (!self.multiple) {\n            self.selection = [media.id];\n            self.ngModel = media.id;\n\n            // Uncheck all the other checkboxes\n            for (var i = 0; i < self.checkboxesStates.length; i++)\n              self.checkboxesStates[i] = i === index;\n          } else if (self.selection.indexOf(media.id) === -1) {\n            self.selection.push(media.id);\n            self.ngModel = self.selection;\n            self.checkboxesStates[index] = true;\n          }\n        }\n      },\n\n      /**\n       * Remove a media from the selection.\n       *\n       * @method uncheck\n       * @param {Object} media\n       * @final\n       */\n      uncheck: {\n        value: function(media) {\n          // Remove from selection\n          index = self.selection.indexOf(media.id);\n          if (index !== -1) {\n            self.selection.splice(index, 1);\n          }\n\n          // Disable value\n          index = self.opaMedias.indexOf(media);\n          if (index !== -1)\n            self.checkboxesStates[index] = false;\n\n          self.ngModel = self.multiple ? self.selection : '';\n        }\n      },\n\n      /**\n       * Set checkboxes states\n       *\n       * Define if checkboxes are checked or not (depending on selection)\n       * at the initialization or when the medias are changed.\n       *\n       * @method setCheckboxesStates\n       * @final\n       */\n      setCheckboxesStates: {\n        value: function() {\n          self.checkboxesStates = [];\n          self.opaMedias.forEach(function(media) {\n            self.checkboxesStates.push(self.selection.indexOf(media.id) !== -1);\n          });\n        }\n      },\n\n      /**\n       * Set focus states\n       *\n       * Disables the focus on all medias\n       *\n       * @method setFocusStates\n       * @final\n       */\n      setFocusStates: {\n        value: function() {\n          self.focusStates = [];\n          self.opaMedias.forEach(function(media) {\n            self.focusStates.push(false);\n          });\n        }\n      },\n\n      /**\n       * Manages options focus.\n       *\n       * Enables focus on the first option when focus reaches\n       * the mediaSelect component, or switches between options\n       * when left or right arrows are pressed.\n       *\n       * @method optionFocus\n       * @final\n       */\n      optionFocus: {\n        value: function($event) {\n          if (!KeyboardEvent.prototype.isPrototypeOf($event) || !self.focusStates.length)\n            return;\n\n          if ($event.keyCode === 9) {\n            self.keepFocus = true;\n            self.focusStates[0] = true;\n            $element.children().addClass('opa-focused');\n          } else {\n            var curIndex = self.focusStates.indexOf(true);\n            var newIndex;\n\n            if (curIndex === -1)\n              return;\n\n            switch ($event.keyCode) {\n              case 37:\n                newIndex = curIndex - 1;\n                break;\n\n              case 39:\n                newIndex = curIndex + 1;\n                break;\n\n              default:\n                return;\n            }\n\n            if (newIndex >= self.focusStates.length)\n              newIndex = 0;\n            else if (newIndex < 0)\n              newIndex = self.focusStates.length - 1;\n\n            if (newIndex === curIndex)\n              return;\n\n            self.keepFocus = true;\n            self.focusStates[curIndex] = false;\n            self.focusStates[newIndex] = true;\n          }\n        }\n      },\n\n      /**\n       * Disables options focus on blur event.\n       *\n       * @method onBlur\n       * @final\n       */\n      onBlur: {\n        value: function() {\n          if (self.keepFocus)\n            self.keepFocus = false;\n          else {\n            var index = self.focusStates.indexOf(true);\n            if (index !== -1)\n              self.focusStates[index] = false;\n\n            $element.children().removeClass('opa-focused');\n          }\n        }\n      }\n\n    });\n  }\n\n  app.controller('OpaMediaSelectController', OpaMediaSelectController);\n  OpaMediaSelectController.$inject = ['$element'];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Manages opaNav component.\n   *\n   * @class OpaNavController\n   * @constructor\n   */\n  function OpaNavController() {\n    var ctrl = this;\n\n    Object.defineProperties(ctrl, {\n\n      /**\n       * Handles keypress items.\n       *\n       * @method handleItemKeypress\n       * @final\n       * @param {Event} event The keypress event\n       * @param {Object} item The item receiving the event\n       */\n      handleItemKeypress: {\n        value: function(event, item) {\n          if (event.keyCode === 13) {\n\n            // Captured \"enter\" key\n\n            // Execute item associated action\n            item.action(item);\n\n          }\n        }\n      }\n\n    });\n  }\n\n  app.controller('OpaNavController', OpaNavController);\n  OpaNavController.$inject = [];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Manages opaTags component.\n   *\n   * @class OpaTagsController\n   * @param {Object} $element The HTML element holding the component\n   * @param {Object} $scope The component isolated scope\n   * @constructor\n   */\n  function OpaTagsController($element, $scope) {\n    var ctrl = this;\n    var ngModelController = $element.controller('ngModel');\n    var mdInputContainerController = $element.controller('mdInputContainer');\n    var inputNgModelController;\n    var autoCompleteElement;\n    var inputElement;\n    var autoCompleteFocusedIndex = -1;\n    var isRequired = false;\n\n    /**\n     * Updates and validates component attributes.\n     */\n    function updateAttributes() {\n      ctrl.opaAvailableTags = (typeof ctrl.opaAvailableTags === 'undefined') ? null : ctrl.opaAvailableTags;\n    }\n\n    /**\n     * Gets tag values.\n     *\n     * The component stores either the list of values or the list of tags (with \"name\" and \"value\") depending\n     * on opa-available-tags attribute.\n     *\n     * When directive does not have opa-available-tags attribute, ctrl.tags stores tags as values.\n     * When directive has opa-available-tags attribute, ctrl.tags contains tags as objects with name and\n     * value properties.\n     *\n     * @return {Array} The opa-tags values\n     */\n    function getValues() {\n\n      // Without opa-available-tags\n      if (!ctrl.opaAvailableTags)\n        return angular.copy(ctrl.tags);\n\n      // With opa-available-tags\n      // Retrieve values from available options\n      var values = [];\n      ctrl.tags.forEach(function(name) {\n        for (var i = 0; i < ctrl.opaAvailableTags.length; i++) {\n          if (ctrl.opaAvailableTags[i].name === name) {\n            values.push(ctrl.opaAvailableTags[i].value);\n            break;\n          }\n        }\n      });\n\n      return values;\n    }\n\n    /**\n     * Avoids propagation and default behaviour of an event.\n     *\n     * @param {Event} event The event to stop\n     */\n    function stopEvent(event) {\n      event.stopImmediatePropagation();\n      event.stopPropagation();\n      event.preventDefault();\n    }\n\n    Object.defineProperties(ctrl, {\n\n      /**\n       * The input value.\n       *\n       * @property tag\n       * @type String\n       */\n      tag: {\n        value: '',\n        writable: true\n      },\n\n      /**\n       * The list of added tags.\n       *\n       * It could contain either a list of strings or a list of objects with \"name\" and \"value\" properties\n       * (if opa-available-tags is set).\n       *\n       * @property tags\n       * @type Array\n       */\n      tags: {\n        value: [],\n        writable: true\n      },\n\n      /**\n       * The autocomplete values corresponding to current input value.\n       *\n       * Only if opa-available-tags is set.\n       *\n       * @property autoCompleteValues\n       * @type Array\n       * @final\n       */\n      autoCompleteValues: {\n        value: []\n      },\n\n      /**\n       * Indicates if the autocomplete should be displayed or not.\n       *\n       * @property isAutoCompleteDisplayed\n       * @type Boolean\n       * @final\n       */\n      isAutoCompleteDisplayed: {\n        value: false,\n        writable: true\n      },\n\n      /**\n       * Initializes controller and attributes.\n       *\n       * @method $onInit\n       * @final\n       */\n      $onInit: {\n        value: function() {\n          updateAttributes();\n          autoCompleteElement = angular.element($element[0].querySelector('.ov-field-tags-auto-complete'));\n          inputElement = $element.find('input');\n\n          inputElement.on('focus', function() {\n            ctrl.isAutoCompleteDisplayed = true;\n          });\n        }\n      },\n\n      /**\n       * Adds a validator on the input.\n       *\n       * AngularJS Material has a special behavior when an HTMLInputElement is within an md-input-container.\n       * When the validity of the input changes it automatically sets the validity of the md-input-container which\n       * is used to visually indicates if the opa-tags field is valid or not.\n       * OpaTagsController also set the validity of the md-input-container when the opa-tags field validity changes.\n       * Consequently the validity state sent to the md-input-container by the OpaTagsController can be crushed by\n       * the one sent by the input ngModel controller.\n       * To avoid this we define a new validator on the input element to match the validity of the opa-tags element.\n       *\n       * @method $postLink\n       * @final\n       */\n      $postLink: {\n        value: function() {\n          inputNgModelController = angular.element($element.find('input')[0]).controller('ngModel');\n\n          // Add the \"opaTags\" validator to the input model\n          // opa-tags is valid if not touched, not required or not empty\n          inputNgModelController.$validators.opaTags = function(modelValue, viewValue) {\n            var isEmpty = !ctrl.tags || ctrl.tags.length === 0;\n            return !inputNgModelController.$touched || !isRequired || !isEmpty;\n          };\n        }\n      },\n\n      /**\n       * Removes event listeners.\n       *\n       * @method $onDestroy\n       * @final\n       */\n      $onDestroy: {\n        value: function() {\n          inputElement.off('focus');\n          inputElement.off('blur');\n          autoCompleteElement.off('keydown');\n        }\n      },\n\n      /**\n       * Handles one-way binding properties changes.\n       *\n       * Watch for changes on the ng-required expression.\n       *\n       * @method $onChanges\n       * @param {Object} changedProperties Properties which have changed since last digest loop\n       * @param {Object} [changedProperties.ngRequired] ng-required old and new value\n       * @param {Boolean} [changedProperties.ngRequired.currentValue] ng-required new value\n       * @final\n       */\n      $onChanges: {\n        value: function(changedProperties) {\n          if (changedProperties.ngRequired) {\n            isRequired = changedProperties.ngRequired.currentValue ? true : false;\n\n            if (mdInputContainerController && mdInputContainerController.label)\n              mdInputContainerController.label.toggleClass('md-required', isRequired);\n          }\n\n          var isEmpty = !ctrl.tags || ctrl.tags.length === 0;\n          if (mdInputContainerController) {\n            mdInputContainerController.setInvalid(\n              isRequired &&\n              isEmpty &&\n              inputNgModelController &&\n              inputNgModelController.$touched\n            );\n          }\n        }\n      },\n\n      /**\n       * Displays auto-complete depending on the given input value.\n       *\n       * @method autoComplete\n       * @final\n       */\n      autoComplete: {\n        value: function() {\n\n          // No predefined tags, thus no auto-complete\n          if (!ctrl.opaAvailableTags) return;\n\n          // Clear actual auto-complete list\n          ctrl.autoCompleteValues.splice(0, ctrl.autoCompleteValues.length);\n\n          // Search all auto-complete names which start by the input value (case insensitive)\n          if (ctrl.tag) {\n            ctrl.opaAvailableTags.forEach(function(tag) {\n              if (tag.name.toLowerCase().indexOf(ctrl.tag.toLowerCase()) === 0)\n                ctrl.autoCompleteValues.push(tag);\n            });\n          }\n\n          if (!ctrl.autoCompleteValues.length) {\n\n            autoCompleteFocusedIndex = -1;\n            autoCompleteElement.off('keydown');\n          } else\n            ctrl.isAutoCompleteDisplayed = true;\n        }\n      },\n\n      /**\n       * Removes a tag when user click on the delete icon.\n       *\n       * @final\n       * @param {Event} event The event which trigger the call to removeTag\n       * @param {Number} index The index of the tag to remove in the list of tags\n       */\n      removeTag: {\n        value: function(event, index) {\n\n          // Remove tag\n          ctrl.tags.splice(index, 1);\n          ngModelController.$setViewValue(getValues());\n\n          // Stop event propagation and default\n          event.stopImmediatePropagation();\n          event.stopPropagation();\n          event.preventDefault();\n\n          // Validate the model\n          ngModelController.$validate();\n\n          // No more tags set focus back to the input\n          if (!ctrl.tags.length)\n            inputElement[0].focus();\n\n        }\n      },\n\n      /**\n       * Handles keyboard events on autocomplete.\n       *\n       * Down and up arrows navigate into the autocomplete focusing the previous / next element in the list.\n       * When hitting down on the first item of the list the focus is set back to the input.\n       * When hitting up on the last item of the list the focus is set back to the input.\n       *\n       * @param {Event} event The keyboard event\n       * @param {String} tagName The name of the tag if enter is pressed\n       */\n      handleAutoCompleteKeys: {\n        value: function(event, tagName) {\n          if (!ctrl.autoCompleteValues.length) return;\n\n          if (event.keyCode === 40 || event.keyCode === 38) {\n            var direction = event.keyCode === 40 ? 1 : -1;\n\n            if (direction === 1 && autoCompleteFocusedIndex + 1 >= ctrl.autoCompleteValues.length ||\n                direction === -1 && autoCompleteFocusedIndex <= 0\n            ) {\n\n              // No more item in the autocomplete list\n              // Go back to the input\n              autoCompleteFocusedIndex = -1;\n              inputElement[0].focus();\n\n            } else {\n              autoCompleteFocusedIndex += direction;\n              autoCompleteElement[0].querySelectorAll('li')[autoCompleteFocusedIndex].focus();\n            }\n\n            stopEvent(event);\n          } else if (event.keyCode === 13 && tagName) {\n            ctrl.addTag(tagName);\n            stopEvent(event);\n          }\n        }\n      },\n\n      /**\n       * Handles keys.\n       *\n       * Add a new tag when user press \"enter\".\n       *\n       * @method handleInputKeys\n       * @final\n       * @param {Event} event The keyboard event\n       */\n      handleInputKeys: {\n        value: function(event) {\n          if (event.keyCode === 13) {\n\n            // Captured \"enter\" key\n\n            // Add the new tag and focus input element\n            ctrl.addTag(ctrl.tag);\n            stopEvent(event);\n\n          } else if (event.keyCode === 9) {\n\n            // Captured \"tag\" key\n            // Leaving field, hide the autocomplete\n            ctrl.isAutoCompleteDisplayed = false;\n\n          } else if (ctrl.autoCompleteValues.length) {\n\n            if (event.keyCode === 40) {\n\n              // Captured \"down\" key\n              // Focus first autocomplete element\n              autoCompleteFocusedIndex = 0;\n              autoCompleteElement[0].querySelector('li').focus();\n\n            } else if (event.keyCode === 38) {\n\n              // Captured \"up\" key\n              // Focus last autocomplete element\n              autoCompleteFocusedIndex = ctrl.autoCompleteValues.length - 1;\n              autoCompleteElement[0].querySelectorAll('li')[autoCompleteFocusedIndex].focus();\n\n            }\n\n            if (event.keyCode === 38 || event.keyCode === 40) {\n              stopEvent(event);\n\n              // Captured \"up\" or \"down\" key\n              // Autocomplete has focus now, listen to keydown events in autocomplete\n              autoCompleteElement.off('keydown');\n              autoCompleteElement.on('keydown', ctrl.handleAutoCompleteKeys);\n            }\n\n          }\n        }\n      },\n\n      /**\n       * Add a new tag.\n       *\n       * @method addTag\n       * @final\n       * @param {String} tag Either the name of the tag if opa-available-tags is set or the value if not\n       */\n      addTag: {\n        value: function(tag) {\n\n          // Without opa-available-tags attribute\n          if ((!ctrl.opaAvailableTags) &&\n              (tag && ctrl.tags.indexOf(tag) === -1)\n             ) {\n            ctrl.tag = '';\n            ctrl.tags.push(tag);\n            ngModelController.$setViewValue(getValues());\n\n            // Validate the model\n            ngModelController.$validate();\n            return;\n          }\n\n          // With opa-available-tags attribute\n          // Make sure tag is part of available tags\n          if (ctrl.opaAvailableTags) {\n            for (var i = 0; i < ctrl.opaAvailableTags.length; i++) {\n              if (ctrl.opaAvailableTags[i].name === tag) {\n\n                // Only register not already entered tags\n                if (tag && ctrl.tags.indexOf(ctrl.opaAvailableTags[i].name) === -1) {\n                  ctrl.tags.push(tag);\n                  ngModelController.$setViewValue(getValues());\n\n                  // Validate the model\n                  ngModelController.$validate();\n                }\n\n                // Clean up input and auto complete and set focus back to input\n                ctrl.tag = '';\n                ctrl.autoComplete();\n                inputElement[0].focus();\n\n                break;\n              }\n            }\n          }\n        }\n      },\n\n      /**\n       * Invalidates component while untouched.\n       *\n       * Invalidates component if input has been touched while component is required and empty.\n       *\n       * @method invalidateUntouched\n       * @final\n       */\n      invalidateUntouched: {\n        value: function() {\n          var values = getValues();\n          var isEmpty = !values || values.length === 0;\n          if (inputNgModelController.$touched || !isRequired || !isEmpty) return;\n          mdInputContainerController.setInvalid(true);\n        }\n      }\n\n    });\n\n    /**\n     * Tests if the model is empty.\n     *\n     * It overrides AngularJS $isEmpty.\n     *\n     * @param {Array} values The list of tags\n     * @return {Boolean} true if there is no tags, false otherwise\n     */\n    ngModelController.$isEmpty = function(values) {\n      var isEmpty = !values || values.length === 0;\n      if (mdInputContainerController)\n        mdInputContainerController.setInvalid(\n          isRequired &&\n          isEmpty &&\n          inputNgModelController &&\n          inputNgModelController.$touched\n        );\n\n      return isEmpty;\n    };\n\n    /**\n     * Renders the list of tags from model.\n     *\n     * The component stores either the list of values or the list of tags (with \"name\" and \"value\") depending\n     * on opa-available-tags attribute.\n     *\n     * When directive does not have opa-available-tags attribute, ctrl.tags stores tags as values.\n     * When directive has opa-available-tags attribute, ctrl.tags contains tags as objects with name and\n     * value properties.\n     *\n     * It overrides AngularJS $render.\n     */\n    ngModelController.$render = function() {\n\n      // No opa-available-tags attribute\n      if (!ctrl.opaAvailableTags)\n        ctrl.tags = angular.copy(ngModelController.$viewValue) || [];\n      else {\n\n        // Got opa-available-tags attribute\n        // Retrieve values from available tags\n        ctrl.tags = [];\n        (ngModelController.$viewValue || []).forEach(function(value) {\n          for (var i = 0; i < ctrl.opaAvailableTags.length; i++) {\n            if (ctrl.opaAvailableTags[i].value === value) {\n              ctrl.tags.push(ctrl.opaAvailableTags[i].name);\n              break;\n            }\n          }\n        });\n\n      }\n    };\n\n    // Watch for attributes changes\n    $scope.$watch('$ctrl.opaAvailableTags', updateAttributes);\n\n  }\n\n  app.controller('OpaTagsController', OpaTagsController);\n  OpaTagsController.$inject = ['$element', '$scope'];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Manages opaToolbar component.\n   *\n   * @class OpaToolbarController\n   * @constructor\n   * @param {Object} $mdMedia AngularJS Material service to evaluate media queries\n   */\n  function OpaToolbarController($mdMedia) {\n    var ctrl = this;\n\n    Object.defineProperties(ctrl, {\n\n      /**\n       * AngularJS Material $mdMedia service.\n       *\n       * @property $mdMedia\n       * @type Object\n       * @final\n       */\n      $mdMedia: {\n        value: $mdMedia\n      }\n\n    });\n  }\n\n  app.controller('OpaToolbarController', OpaToolbarController);\n  OpaToolbarController.$inject = ['$mdMedia'];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Manages content groups.\n   *\n   * @class OpaGroupsFactory\n   * @param {Object} $http AngularJS $http service\n   * @param {String} opaWebServiceBasePath Portal web service base path\n   */\n  function OpaGroupsFactory($http, opaWebServiceBasePath) {\n\n    /**\n     * Gets the list of OpenVeo groups.\n     *\n     * @return {HttpPromise} An AngularJS promise resolving with the list of groups\n     * @method getGroups\n     */\n    function getGroups() {\n      return $http.get(opaWebServiceBasePath + 'groups');\n    }\n\n    return {\n      getGroups: getGroups\n    };\n\n  }\n\n  app.factory('opaGroupsFactory', OpaGroupsFactory);\n  OpaGroupsFactory.$inject = ['$http', 'opaWebServiceBasePath'];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa.i18n\n */\n\n(function(app) {\n\n  /**\n   * Manages languages.\n   *\n   * @class OpaI18nFactory\n   */\n  function OpaI18nFactory() {\n\n    /**\n     * Gets the list of supported languages.\n     *\n     * @return {Array} The list of language country codes\n     * @method getLanguages\n     */\n    function getLanguages() {\n      return openVeoPortalSettings.languages;\n    }\n\n    return {\n      getLanguages: getLanguages\n    };\n\n  }\n\n  app.factory('opaI18nFactory', OpaI18nFactory);\n  OpaI18nFactory.$inject = [];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Info directive presents a message in an AngularJS Material panel with a close button.\n   *\n   * When HTML element holding the attribute is clicked, a panel is opened next to the element\n   * with the message and a close button.\n   *\n   *     $scope.message = 'Message which may contain HTML';\n   *\n   *     <div\n   *       opa-info=\"message\"\n   *       opa-close=\"Close button label\"\n   *       opa-close-aria=\"Close button ARIA label\"\n   *     ></div>\n   *\n   * Available attributes are:\n   * - [Object] **opa-info**: The wrapped version of the message that can be used as a trusted\n   * variant in $sce.HTML context\n   * - [String] **opa-close**: The close button label\n   * - [String] **opa-close-aria**: The close button ARIA label\n   *\n   * Requires:\n   * - **ngMaterial** AngularJS Material module\n   *\n   * @class opaInfo\n   */\n  function opaInfo() {\n    return {\n      restrict: 'A',\n      scope: {\n        message: '<opaInfo',\n        closeLabel: '@opaClose',\n        closeAriaLabel: '@opaCloseAria'\n      },\n      controller: 'OpaInfoController',\n      controllerAs: 'ctrl',\n      bindToController: true\n    };\n  }\n\n  app.directive('opaInfo', opaInfo);\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Defines an HTTP interceptor.\n   *\n   * It intercepts HTTP requests to add the back office base path to all requests except templates.\n   * It handles all HTTP responses errors and displays corresponding error messages.\n   *\n   * Not authorized errors (401) broadcast a opaHttpError event while the other HTTP errors display an error message\n   * using a notification.\n   *\n   * @class OpaInterceptor\n   * @param {Object} $rootScope AngularJS root scope\n   * @param {Object} $filter AngularJS $filter service\n   * @param {Object} $q AngularJS $q service\n   */\n  function OpaInterceptor($rootScope, $filter, $q) {\n\n    /**\n     * Builds the error message for the given error.\n     *\n     * @param {Object} error The promise error as returned by the interceptor\n     * @return {String} The translated error message corresponding to the server error\n     */\n    var getErrorMessage = function(error) {\n      var errorCode;\n\n      if (error.data && error.data.error)\n        errorCode = error.data.error.code;\n\n      // Not authorized\n      if (error.status === 403)\n        return $filter('opaTranslate')('ERRORS.FORBIDDEN');\n\n      // Probably a client application error\n      else if (error.status === 400)\n        return $filter('opaTranslate')('ERRORS.CLIENT');\n\n      // Internal server error\n      else if (errorCode)\n        return $filter('opaTranslate')('ERRORS.SERVER') + ' (code=' + errorCode + ')';\n\n      // Other error\n      else\n        return $filter('opaTranslate')('ERRORS.SERVER');\n    };\n\n    return {\n\n      request: function(config) {\n\n        // Add base path to all requests except templates\n        if (config.url && !/^.*\\.html$/.test(config.url))\n          config.url = '/be/' + config.url.replace(/^\\/(.*)/, '$1');\n\n        return config;\n      },\n\n      responseError: function(rejection) {\n\n        // A request has been attempted while user is not longer authenticated on the server side\n        if (rejection.status === 401)\n          $rootScope.$broadcast('opaHttpError', {authenticationError: true});\n\n        // Canceled or network error\n        else if (rejection.status === -1) {\n\n          // Set alert only on network error, not on cancel\n          if (!rejection.config || !rejection.config.timeout || !rejection.config.timeout.status)\n            $rootScope.$broadcast('opaHttpError', {message: getErrorMessage(rejection)});\n\n        // Other status\n        } else\n          $rootScope.$broadcast('opaHttpError', {message: getErrorMessage(rejection)});\n\n        return $q.reject(rejection);\n      }\n    };\n  }\n\n  app.factory('opaInterceptor', OpaInterceptor);\n  OpaInterceptor.$inject = ['$rootScope', '$filter', '$q'];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Manages opaLicenseKeyValidator directive.\n   *\n   * @class OpaLicenseKeyValidatorController\n   * @constructor\n   * @param {Object} $element JQLite element of the directive\n   */\n  function OpaLicenseKeyValidatorController($element) {\n    var ctrl = this;\n    var ngModelController = $element.controller('ngModel');\n\n    Object.defineProperties(this, {\n\n      /**\n       * Validates that the given value is a license key.\n       *\n       * Expected format only allows series of 5 characters separated by dashes.\n       * Only alphanumeric characters are allowed between dashes.\n       * e.g. PLAY1-cerPw-zxezN-eMvje-9jHAD-8xA3j\n       *\n       * @method isValid\n       * @param {String} value The license key to validate\n       * @return {Boolean} true if valid, false otherwise\n       * @final\n       */\n      isValid: {\n        value: function(value) {\n          return /^([a-zA-Z0-9]{5}-)*[a-zA-Z0-9]{5}$/.test(value);\n        }\n      },\n\n      /**\n       * Handles one-way binding properties changes and force model validation.\n       *\n       * @method $onChanges\n       * @final\n       */\n      $onChanges: {\n        value: function() {\n          ngModelController.$validate();\n        }\n      }\n\n    });\n\n    // Add the \"opaLicenseKey\" validator to the model\n    ngModelController.$validators.opaLicenseKey = function(modelValue, viewValue) {\n      if (!modelValue) return true;\n      if (!ctrl.opaLicenseKeyValidator) return true;\n      return ctrl.isValid(modelValue);\n    };\n  }\n\n  app.controller('OpaLicenseKeyValidatorController', OpaLicenseKeyValidatorController);\n  OpaLicenseKeyValidatorController.$inject = ['$element'];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * License key validator directive validates that a model is a valid license key.\n   *\n   *     <script>\n   *       function Controller($scope) {\n   *         $scope.validates = true;\n   *       }\n   *     </script>\n   *     <form name=\"myForm\">\n   *       <input name=\"myField\" ng-model=\"myLicenseKey\" opa-license-key-validator=\"{{validates}}\" />\n   *       {{myForm.myField.$error.opaLicenseKeyValidator}}\n   *     </form>\n   *\n   * Available attributes are:\n   *   - [Boolean] **opa-license-key-validator** An AngularJS expression evaluating to true if validator is active,\n   *     false otherwise\n   *\n   * The registered name of the validator is \"opaLicenseKey\".\n   *\n   * @class opaLicenseKeyValidator\n   */\n  function opaLicenseKeyValidator() {\n    return {\n      restrict: 'A',\n      require: ['^ngModel'],\n      controller: 'OpaLicenseKeyValidatorController',\n      controllerAs: 'ctrl',\n      bindToController: true,\n      scope: {\n        opaLicenseKeyValidator: '<'\n      }\n    };\n  }\n\n  app.directive('opaLicenseKeyValidator', opaLicenseKeyValidator);\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Manages media library dialog\n   *\n   * @class OpaMediaLibraryDialogController\n   * @constructor\n   */\n  function OpaMediaLibraryDialogController($mdDialog, $mdMedia, value, multiple) {\n    var self = this;\n\n    Object.defineProperties(self, {\n\n      /**\n       * Value of the media library.\n       *\n       * @property value\n       * @type Mixed\n       */\n      value: {\n        value: null,\n        writable: true\n      },\n\n      /**\n       * Defines if the value can contains one or many medias.\n       *\n       * @property multiple\n       * @type Boolean\n       */\n      multiple: {\n        value: null,\n        writable: true\n      },\n\n      /**\n       * Initializes controller.\n       *\n       * @method $onInit\n       * @final\n       */\n      $onInit: {\n        value: function() {\n          self.value = value;\n          self.multiple = multiple;\n        }\n      },\n\n      /**\n       * Determines the size of the dialog depending on the view port.\n       *\n       * @method dialogSizeClass\n       * @final\n       */\n      dialogSizeClass: {\n        value: function() {\n          if ($mdMedia('xs'))\n            return 'opa-dialog-100';\n\n          if ($mdMedia('sm'))\n            return 'opa-dialog-80';\n\n          if ($mdMedia('md'))\n            return 'opa-dialog-55';\n\n          if ($mdMedia('gt-md'))\n            return 'opa-dialog-40';\n\n          return;\n        }\n      },\n\n      /**\n       * Cancels changes.\n       *\n       * @method cancel\n       * @final\n       */\n      cancel: {\n        value: function() {\n          $mdDialog.cancel();\n        }\n      },\n\n      /**\n       * Saves changes.\n       *\n       * @method close\n       * @final\n       */\n      close: {\n        value: function() {\n          $mdDialog.hide({value: self.value});\n        }\n      }\n\n    });\n  }\n\n  app.controller('OpaMediaLibraryDialogController', OpaMediaLibraryDialogController);\n  OpaMediaLibraryDialogController.$inject = ['$mdDialog', '$mdMedia', 'value', 'multiple'];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Manages notifications.\n   *\n   * @class OpaNotificationController\n   * @constructor\n   * @param {Object} $mdToast AngularJS Material toast service\n   * @param {Object} $mdMedia AngularJS Material media query service\n   */\n  function OpaNotificationController($mdToast, $mdMedia) {\n    var ctrl = this;\n\n    Object.defineProperties(ctrl, {\n\n      /**\n       * AngularJS Material $mdMedia service.\n       *\n       * @property $mdMedia\n       * @type Object\n       * @final\n       */\n      $mdMedia: {\n        value: $mdMedia\n      },\n\n      /**\n       * Hides the notification.\n       *\n       * @method hide\n       * @final\n       */\n      hide: {\n        value: function() {\n          $mdToast.hide();\n        }\n      }\n\n    });\n  }\n\n  app.controller('OpaNotificationController', OpaNotificationController);\n  OpaNotificationController.$inject = ['$mdToast', '$mdMedia'];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Manages storage of OpenVeo Portal settings.\n   *\n   * @class OpaSettingsFactory\n   * @param {Object} $http AngularJS $http service\n   * @param {String} opaWebServiceBasePath Portal web service base path\n   */\n  function OpaSettingsFactory($http, opaWebServiceBasePath) {\n\n    /**\n     * Gets a portal setting.\n     *\n     * @param {String} settingId The id of the setting to fetch\n     * @return {HttpPromise} An AngularJS promise resolving with an object containing the value of the setting\n     * @method getSetting\n     */\n    function getSetting(settingId) {\n      return $http.get(opaWebServiceBasePath + 'settings/' + settingId);\n    }\n\n    /**\n     * Updates a portal setting.\n     *\n     * @param {String} settingId The id of the setting to update / add\n     * @param {Mixed} value The value of the setting\n     * @return {HttpPromise} An AngularJS promise resolving with an object containing:\n     *   - [String|null] **error** The error message or null if no error\n     *   - [String] **status** 'ok' if success, 'ko' otherwise\n     * @method updateSetting\n     */\n    function updateSetting(settingId, value) {\n      return $http.post(opaWebServiceBasePath + 'settings/' + settingId, {\n        value: value\n      });\n    }\n\n    return {\n      getSetting: getSetting,\n      updateSetting: updateSetting\n    };\n\n  }\n\n  app.factory('opaSettingsFactory', OpaSettingsFactory);\n  OpaSettingsFactory.$inject = ['$http', 'opaWebServiceBasePath'];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Manages opaStreamUrlValidator directive.\n   *\n   * @class OpaStreamUrlValidatorController\n   * @constructor\n   * @param {Object} $element JQLite element of the directive\n   */\n  function OpaStreamUrlValidatorController($element) {\n    var ctrl = this;\n    var ngModelController = $element.controller('ngModel');\n\n    Object.defineProperties(this, {\n\n      /**\n       * Validates that the given value is a Youtube stream URL.\n       *\n       * Expected format only allows URLs starting with \"https://www.youtube.com/watch?v=\" and\n       * finishing with any number of alphanumeric characters plus some URL characters like\n       * dashes, underscores, ampersand and equals.\n       * e.g. https://www.youtube.com/watch?v=someid\n       *\n       * @method isValidYoutubeStreamUrl\n       * @param {String} value The url to validate\n       * @return {Boolean} true if valid, false otherwise\n       * @final\n       */\n      isValidYoutubeStreamUrl: {\n        value: function(value) {\n          return /^https:\\/\\/www\\.youtube\\.com\\/watch\\?v=[&=\\w-]+$/.test(value);\n        }\n      },\n\n      /**\n       * Validates that the given value is a Wowza stream URL.\n       *\n       * Expected format allows http or https URLs with or without port followed by two REST\n       * like parameters and ending by \"playlist.m3u8\".\n       * e.g. https://wowza-example.local:1935/application-example/stream-example/playlist.m3u8\n       *\n       * @method isValidWowzaStreamUrl\n       * @param {String} value The url to validate\n       * @return {Boolean} true if valid, false otherwise\n       * @final\n       */\n      isValidWowzaStreamUrl: {\n        value: function(value) {\n          return /^https?:\\/\\/[\\w-.]*(:[0-9]+)?\\/[\\w-._]+\\/[\\w-._]+\\/playlist.m3u8$/.test(value);\n        }\n      },\n\n      /**\n       * Validates that the given value is a Vodalys Studio stream URL.\n       *\n       * Expected format only allows URLs starting with \"https://console.vodaly.stydio/\" and\n       * finishing with any sequence of characters excluding interrogation point, hash or equal.\n       * e.g. https://console.vodalys.studio/vpage2/0hjertPpReB2Dbmr\n       *\n       * @method isValidVodalysStreamUrl\n       * @param {String} value The url to validate\n       * @return {Boolean} true if valid, false otherwise\n       * @final\n       */\n      isValidVodalysStreamUrl: {\n        value: function(value) {\n          return /^https?:\\/\\/console\\.vodalys\\.studio\\/[^#?=]+$/.test(value);\n        }\n      },\n\n      /**\n       * Handles one-way binding properties changes and force model validation.\n       *\n       * @method $onChanges\n       * @final\n       */\n      $onChanges: {\n        value: function() {\n          ngModelController.$validate();\n        }\n      }\n\n    });\n\n    // Add the \"opaStreamUrl\" validator to the model\n    ngModelController.$validators.opaStreamUrl = function(modelValue, viewValue) {\n      if (!modelValue) return true;\n      if (!ctrl.opaStreamUrlValidator) return true;\n\n      if (ctrl.opaType === 'youtube') return ctrl.isValidYoutubeStreamUrl(modelValue);\n      else if (ctrl.opaType === 'wowza') return ctrl.isValidWowzaStreamUrl(modelValue);\n      else if (ctrl.opaType === 'vodalys') return ctrl.isValidVodalysStreamUrl(modelValue);\n    };\n  }\n\n  app.controller('OpaStreamUrlValidatorController', OpaStreamUrlValidatorController);\n  OpaStreamUrlValidatorController.$inject = ['$element'];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Stream URL validator directive validates that a model is a valid stream URL depending on type.\n   *\n   *     <script>\n   *       function Controller($scope) {\n   *         $scope.validates = true;\n   *         $scope.streamType = 'youtube';\n   *       }\n   *     </script>\n   *     <form name=\"myForm\">\n   *       <input name=\"myField\" ng-model=\"myUrl\" opa-stream-url-validator=\"{{validates}}\" opa-type=\"{{streamType}}\"/>\n   *       {{myForm.myField.$error.opaStreamUrlValidator}}\n   *     </form>\n   *\n   * Available attributes are:\n   *   - [Boolean] **opa-stream-url-validator** An AngularJS expression evaluating to true if validator is active,\n   *     false otherwise\n   *   - [String] **opa-type** An AngularJS expression evaluating to a String, possible values are:\n   *     - **youtube** Validate that the stream url respect the following format: https://www.youtube.com/watch?v=[ID]\n   *       with:\n   *       - **[ID]** the id of the stream\n   *     - **wowza** Validate that the stream url respect the following format:\n   *       [WOWZA_PROTOCOL]://[WOWZA_IP_ADDRESS]:[WOWZA_PORT]/[WOWZA_APPLICATION_NAME]/[WOWZA_STREAM_NAME]/playlist.m3u8\n   *       with:\n  *        - **[WOWZA_PROTOCOL]** Wowza streaming protocol (either http or https)\n  *        - **[WOWZA_IP_ADDRESS]** Wowza streaming engine IP address\n  *        - **[WOWZA_PORT]** Wowza streaming engine port\n  *        - **[WOWZA_APPLICATION_NAME]** Wowza live application name\n  *        - **[WOWZA_STREAM_NAME]** Wowza live stream name (could be a SMIL name)\n   *     - **vodalys** Validate that the stream url respect the following format: https://console.vodalys.studio/[ID]\n   *       with:\n   *       - **[ID]** the id of the stream\n   *\n   * The registered name of the validator is \"opaStreamUrl\".\n   *\n   * @class opaStreamUrlValidator\n   */\n  function opaStreamUrlValidator() {\n    return {\n      restrict: 'A',\n      require: ['^ngModel'],\n      controller: 'OpaStreamUrlValidatorController',\n      controllerAs: 'ctrl',\n      bindToController: true,\n      scope: {\n        opaStreamUrlValidator: '<',\n        opaType: '<'\n      }\n    };\n  }\n\n  app.directive('opaStreamUrlValidator', opaStreamUrlValidator);\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Manages authenticated user.\n   *\n   * @class OpaUserFactory\n   * @param {Object} $http AngularJS $http service\n   * @param {Object} $cookies AngularJS $cookies service\n   * @param {String} opaWebServiceBasePath Portal web service base path\n   */\n  function OpaUserFactory($http, $cookies, opaWebServiceBasePath) {\n    var language = ($cookies.get('language') || navigator.language || navigator.browserLanguage).split('-')[0];\n\n    /**\n     * Gets user information.\n     *\n     * @return {Object} The user description object\n     * @method getUserInfo\n     */\n    function getUserInfo() {\n      return openVeoPortalSettings.user;\n    }\n\n    /**\n     * Indicates if user is authenticated or not.\n     *\n     * @method isAuthenticated\n     * @return {Boolean} true if authenticated, false otherwise\n     */\n    function isAuthenticated() {\n      return openVeoPortalSettings.user ? true : false;\n    }\n\n    /**\n     * Logs out user.\n     *\n     * @return {HttPromise} The logout promise\n     * @method logout\n     */\n    function logout() {\n      return $http.post(opaWebServiceBasePath + 'logout');\n    }\n\n    /**\n     * Gets user's preferred language.\n     *\n     * @method getLanguage\n     * @return {String} The user's language code\n     */\n    function getLanguage() {\n      return language;\n    }\n\n    /**\n     * Sets user's preferred language.\n     *\n     * @param {String} newLanguage A language country code (e.g en-CA)\n     * @method setLanguage\n     */\n    function setLanguage(newLanguage) {\n      language = newLanguage;\n      $cookies.put('language', language);\n    }\n\n    return {\n      getUserInfo: getUserInfo,\n      isAuthenticated: isAuthenticated,\n      logout: logout,\n      getLanguage: getLanguage,\n      setLanguage: setLanguage\n    };\n\n  }\n\n  app.factory('opaUserFactory', OpaUserFactory);\n  OpaUserFactory.$inject = ['$http', '$cookies', 'opaWebServiceBasePath'];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Manages videos.\n   *\n   * @class OpaVideosFactory\n   * @param {Object} $http AngularJS $http service\n   * @param {String} opaWebServiceBasePath Portal web service base path\n   */\n  function OpaVideosFactory($http, opaWebServiceBasePath) {\n\n    /**\n     * Gets an OpenVeo video.\n     *\n     * @param {String} id The id of the video to retrieve\n     * @return {HttpPromise} An AngularJS promise resolving with the video\n     * @method getVideo\n     */\n    function getVideo(id) {\n      return $http.get(opaWebServiceBasePath + 'videos/' + id);\n    }\n\n    /**\n     * Gets promoted videos.\n     *\n     * @return {HttpPromise} An AngularJS promise resolving with an object containing the promoted videos\n     * @method getPromotedVideos\n     */\n    function getPromotedVideos() {\n      return $http.get(opaWebServiceBasePath + 'videos/promoted');\n    }\n\n    return {\n      getVideo: getVideo,\n      getPromotedVideos: getPromotedVideos\n    };\n\n  }\n\n  app.factory('opaVideosFactory', OpaVideosFactory);\n  OpaVideosFactory.$inject = ['$http', 'opaWebServiceBasePath'];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Creates toasts notifications.\n   *\n   * Requires:\n   * - **ngMaterial** AngularJS Material module\n   *\n   * @class OpaNotificationFactory\n   * @param {Object} $mdToast AngularJS Material media query service\n   * @param {Object} opaNotificationConfiguration OPA notifications configuration service\n   */\n  function OpaNotificationFactory($mdToast, opaNotificationConfiguration) {\n    var defaultOptions = opaNotificationConfiguration.getOptions();\n\n    /**\n     * Displays a notification using AngularJS Material toaster.\n     *\n     * @method displayNotification\n     * @param {String} message The message to display\n     * @param {Number} [delay] Duration (in milliseconds) before automatically closing the notification,\n     * 0 to add a button to close the notification\n     * @param {String} [closeLabel] Close button label\n     * @param {String} [closeAriaLabel] Close button ARIA label\n     */\n    function displayNotification(message, delay, closeLabel, closeAriaLabel) {\n      if (!message) return;\n      delay = Math.max(delay, 0) || 0;\n\n      $mdToast.show($mdToast.build({\n        hideDelay: delay,\n        templateUrl: 'opa-notification.html',\n        controller: 'OpaNotificationController',\n        controllerAs: 'ctrl',\n        bindToController: true,\n        locals: {\n          message: message,\n          closeButton: delay === 0,\n          closeLabel: closeLabel || defaultOptions.closeLabel,\n          closeAriaLabel: closeAriaLabel || defaultOptions.closeAriaLabel\n        }\n      }));\n    }\n\n    return {\n      displayNotification: displayNotification\n    };\n\n  }\n\n  app.factory('opaNotificationFactory', OpaNotificationFactory);\n  OpaNotificationFactory.$inject = ['$mdToast', 'opaNotificationConfiguration'];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Manages opaPromotedVideos component.\n   *\n   * @class OpaPromotedVideosController\n   * @constructor\n   * @param {Object} $scope The component isolated scope\n   * @param {Object} $filter AngularJS $filter service\n   * @param {Object} $mdDialog AngularJS Material dialog service to open the media library\n   * @param {Object} $mdMedia AngularJS Material media service to perform media queries\n   * @param {Object} opaSettingsFactory Settings factory to get / save settings\n   * @param {Object} opaVideosFactory Videos factory to get videos\n   * @param {Object} opaNotificationFactory Notification factory to display saving notifications\n   * @param {Object} opaUrlFactory URL factory to manipulate URLs\n   */\n  function OpaPromotedVideosController(\n   $scope,\n   $filter,\n   $mdDialog,\n   $mdMedia,\n   opaSettingsFactory,\n   opaVideosFactory,\n   opaNotificationFactory,\n   opaUrlFactory\n  ) {\n    var ctrl = this;\n\n    Object.defineProperties(ctrl, {\n\n      /**\n       * Indicates if retreiving the promoted videos failed.\n       *\n       * @property isError\n       * @type Boolean\n       * @final\n       */\n      isError: {\n        value: false,\n        writable: true\n      },\n\n      /**\n       * Indicates if currently saving.\n       *\n       * @property isSaving\n       * @type Boolean\n       * @final\n       */\n      isSaving: {\n        value: false,\n        writable: true\n      },\n\n      /**\n       * Promoted videos settings.\n       *\n       * @property promotedVideos\n       * @type Object\n       * @final\n       */\n      promotedVideos: {\n        value: null,\n        writable: true\n      },\n\n      /**\n       * The list of video containers.\n       *\n       * @property containers\n       * @type Array\n       */\n      containers: {\n        value: [],\n        writable: true\n      },\n\n      /**\n       * CSS class of the media containers components.\n       *\n       * @property containersClass\n       * @type String\n       */\n      containersClass: {\n        value: '',\n        writable: true\n      },\n\n      /**\n       * Initializes controller and informs when component is loaded.\n       *\n       * @method $onInit\n       * @final\n       */\n      $onInit: {\n        value: function() {\n          opaVideosFactory.getPromotedVideos().then(function(result) {\n            ctrl.promotedVideos = result.data && result.data || new Array(9);\n\n            for (var i = 0; i < ctrl.promotedVideos.length; i++) {\n              var style = i === 0 ? 'publish-16by9-300' : 'publish-16by9-142';\n\n              if (ctrl.promotedVideos[i]) {\n                ctrl.promotedVideos[i].preview = opaUrlFactory.setUrlParameter(\n                  ctrl.promotedVideos[i].thumbnail,\n                  'style',\n                  style\n                );\n              }\n\n              ctrl.containers[i] = {\n                title: i + 1,\n                style: style,\n                media: ctrl.promotedVideos[i]\n              };\n            }\n\n            $scope.$emit('opaViewLoaded');\n          }, function(error) {\n            ctrl.isError = true;\n            $scope.$emit('opaViewLoaded');\n          });\n        }\n      },\n\n      /**\n       * Loads containers template depending on the media.\n       *\n       * @method getContainersTemplate\n       * @final\n       */\n      getContainersTemplate: {\n        value: function() {\n          var template;\n\n          if ($mdMedia('xs')) {\n            ctrl.containersClass = 'opa-xs';\n            template = 'opa-promotedVideos-containers-2And4Cols.html';\n          } else if ($mdMedia('sm')) {\n            ctrl.containersClass = 'opa-sm';\n            template = 'opa-promotedVideos-containers-3Cols.html';\n          } else {\n            ctrl.containersClass = 'opa-gt-sm';\n            template = 'opa-promotedVideos-containers-2And4Cols.html';\n          }\n          return template;\n        }\n      },\n\n      /**\n       * Opens media library when click event is triggered on a video container.\n       *\n       * @method openMediaLibraryDialog\n       * @final\n       */\n      openMediaLibraryDialog: {\n        value: function(index) {\n          var container = ctrl.containers[index];\n          $mdDialog.show({\n            controller: 'OpaMediaLibraryDialogController',\n            controllerAs: '$ctrl',\n            templateUrl: 'opa-mediaLibraryDialog.html',\n            locals: {\n              value: container.media ? container.media.id : undefined,\n              multiple: false\n            }\n          }).then(\n            function(response) {\n              var mediaId = response.value;\n\n              if (!mediaId) {\n                container.media = undefined;\n                return;\n              }\n\n              opaVideosFactory.getVideo(mediaId).then(function(response) {\n                container.media = response.data.entity;\n                container.media.preview = opaUrlFactory.setUrlParameter(\n                  response.data.entity.thumbnail,\n                  'style',\n                  container.style\n                );\n              });\n            },\n            function() {\n            }\n          );\n        }\n      },\n\n      /**\n       * Removes video from a container.\n       *\n       * @method clearContainer\n       * @final\n       */\n      clearContainer: {\n        value: function(index) {\n          ctrl.containers[index].media = undefined;\n        }\n      },\n\n      /**\n       * Saves promoted videos.\n       *\n       * @method save\n       * @final\n       */\n      save: {\n        value: function() {\n          ctrl.isSaving = true;\n          var promotedVideos = new Array(9);\n\n          for (var i = 0; i < promotedVideos.length; i++)\n            promotedVideos[i] = (ctrl.containers[i].media && ctrl.containers[i].media.id) || undefined;\n\n          opaSettingsFactory.updateSetting('promoted-videos', promotedVideos).then(function() {\n            ctrl.isSaving = false;\n            opaNotificationFactory.displayNotification($filter('opaTranslate')('PROMOTED_VIDEOS.SAVE_SUCCESS'), 1000);\n          }, function(error) {\n            ctrl.isSaving = false;\n          });\n        }\n      }\n\n    });\n  }\n\n  app.controller('OpaPromotedVideosController', OpaPromotedVideosController);\n  OpaPromotedVideosController.$inject = [\n    '$scope',\n    '$filter',\n    '$mdDialog',\n    '$mdMedia',\n    'opaSettingsFactory',\n    'opaVideosFactory',\n    'opaNotificationFactory',\n    'opaUrlFactory'\n  ];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Manages opaSettings component.\n   *\n   * @class OpaSettingsController\n   * @constructor\n   * @param {Object} $scope The component isolated scope\n   * @param {Object} $q AngularJS $q service\n   * @param {Object} $filter AngularJS $filter service\n   * @param {Object} $element The HTML element holding the component\n   * @param {Object} opaSettingsFactory Settings factory to get / save settings\n   * @param {Object} opaGroupsFactory Groups factory to get available groups\n   * @param {Object} opaNotificationFactory Notification factory to display saving notifications\n   */\n  function OpaSettingsController(\n    $scope,\n    $q,\n    $filter,\n    $element,\n    opaSettingsFactory,\n    opaGroupsFactory,\n    opaNotificationFactory\n  ) {\n    var ctrl = this;\n    var liveSettingsController;\n    var mdContentController = $element.controller && $element.controller('mdContent');\n\n    Object.defineProperties(ctrl, {\n\n      /**\n       * Indicates if retreiving the settings failed.\n       *\n       * @property isError\n       * @type Boolean\n       * @final\n       */\n      isError: {\n        value: false,\n        writable: true\n      },\n\n      /**\n       * The list of OpenVeo groups with name and value.\n       *\n       * @property availableGroups\n       * @type Array\n       * @final\n       */\n      availableGroups: {\n        value: []\n      },\n\n      /**\n       * Live settings.\n       *\n       * @property liveSettings\n       * @type Object\n       * @final\n       */\n      liveSettings: {\n        value: null,\n        writable: true\n      },\n\n      /**\n       * Initializes controller and informs when component is loaded.\n       *\n       * @method $onInit\n       * @final\n       */\n      $onInit: {\n        value: function() {\n          $q.all([\n            opaSettingsFactory.getSetting('live'),\n            opaGroupsFactory.getGroups()\n          ]).then(function(results) {\n            var groups = results[1].data && results[1].data.entities;\n            ctrl.liveSettings = results[0].data && results[0].data.entity && results[0].data.entity.value || {};\n\n            // Build the list of available groups\n            if (groups) {\n              groups.forEach(function(group) {\n                ctrl.availableGroups.push({\n                  name: group.name,\n                  value: group.id\n                });\n              });\n            }\n\n            $scope.$emit('opaViewLoaded');\n          }, function(error) {\n            ctrl.isError = true;\n            $scope.$emit('opaViewLoaded');\n          });\n\n          $scope.$on('opaLiveSettingsLinked', function(event, data) {\n            liveSettingsController = data.controller;\n          });\n\n          // If the component is inside an md-content element the only way to have a background color\n          // which spread all along the height of the md-content is to set the background color\n          // on the md-content itself. This is due to flexbox behaviour when having a flex container with\n          // stretch items, if items haven't an intrinsic height they shrink. As we want the child to\n          // stretch to an indeterminated height (the height of the container) it is not possible to specify\n          // the child height. A way to solve the problem will be to use experimental features such as\n          // \"width: fit-content;\". Instead we add a class on the md-content parent element.\n          if (mdContentController)\n            mdContentController.$element.addClass('opa-settings-wrapper');\n        }\n\n      },\n\n      /**\n       * Saves current settings.\n       *\n       * @method save\n       * @final\n       */\n      save: {\n        value: function() {\n          ctrl.isSaving = true;\n\n          opaSettingsFactory.updateSetting('live', ctrl.liveSettings).then(function() {\n            ctrl.isSaving = false;\n            opaNotificationFactory.displayNotification($filter('opaTranslate')('SETTINGS.SAVE_SUCCESS'), 1000);\n          }, function(error) {\n            ctrl.isSaving = false;\n          });\n        }\n      },\n\n      /**\n       * Updates live settings.\n       *\n       * @method updateLiveSettings\n       * @param {Object} settings Live settings\n       * @param {Boolean} settings.activated true if live is activated, false otherwise\n       * @param {String} settings.playerType Either \"youtube\", \"wowza\" or \"vodalys\"\n       * @param {String} settings.url Live stream URL\n       * @param {Boolean} settings.private true if live is private, false otherwise\n       * @param {Array} settings.groups The list of groups allowed to access the live\n       * @param {Object} settings.wowza Wowza specific settings\n       * @final\n       */\n      updateLiveSettings: {\n        value: function(settings) {\n          if (!settings || !ctrl.liveSettings) return;\n          ctrl.liveSettings.activated = settings.activated;\n          ctrl.liveSettings.playerType = settings.playerType;\n          ctrl.liveSettings.url = settings.url;\n          ctrl.liveSettings.private = settings.private;\n          ctrl.liveSettings.groups = settings.groups;\n          ctrl.liveSettings.wowza = settings.wowza;\n        }\n      },\n\n      /**\n       * Tests if settings are valid.\n       *\n       * @method isValid\n       * @return {Boolean} true if valid, false otherwise\n       * @final\n       */\n      isValid: {\n        value: function() {\n          if (liveSettingsController) {\n            return liveSettingsController.isValid();\n          }\n          return false;\n        }\n      }\n\n    });\n  }\n\n  app.controller('OpaSettingsController', OpaSettingsController);\n  OpaSettingsController.$inject = [\n    '$scope',\n    '$q',\n    '$filter',\n    '$element',\n    'opaSettingsFactory',\n    'opaGroupsFactory',\n    'opaNotificationFactory'\n  ];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Defines the main controller of the OpenVeo Portal administration interface.\n   *\n   * @class OpaIndexController\n   * @constructor\n   * @param {Object} $scope AngularJS scope\n   * @param {Object} $route AngularJS $route service\n   * @param {Object} $window AngularJS $window service\n   * @param {Object} $location AngularJS $location service\n   * @param {Object} $filter AngularJS $filter service\n   * @param {Object} $mdMedia AngularJS Material service to evaluate media queries\n   * @param {Object} $mdSidenav AngularJS Material service to manipulate sidenav directives\n   * @param {Object} opaUserFactory User factory to deal with the authenticated user\n   * @param {Object} opaI18nFactory I18n factory to manage languages\n   * @param {Object} opaNotificationFactory Notification factory\n   */\n  function OpaIndexController(\n    $scope,\n    $route,\n    $window,\n    $location,\n    $filter,\n    $mdMedia,\n    $mdSidenav,\n    opaUserFactory,\n    opaI18nFactory,\n    opaNotificationFactory\n  ) {\n    var ctrl = this;\n    var translateFilter = $filter('opaTranslate');\n\n    Object.defineProperties(ctrl, {\n\n      /**\n       * Information about the page.\n       *\n       * @property page\n       * @type Object\n       * @final\n       */\n      page: {\n        value: {}\n      },\n\n      /**\n       * Title of the administration interface as a translation id.\n       *\n       * @property adminTitle\n       * @type Object\n       * @final\n       */\n      adminTitle: {\n        value: 'HEADER.TITLE'\n      },\n\n      /**\n       * AngularJS Material $mdMedia service.\n       *\n       * @property $mdMedia\n       * @type Object\n       * @final\n       */\n      $mdMedia: {\n        value: $mdMedia\n      },\n\n      /**\n       * Menu links.\n       *\n       * @property menuLinks\n       * @type Array\n       * @final\n       */\n      menuLinks: {\n        value: []\n      },\n\n      /**\n       * The list of left actions for the toolbar.\n       *\n       * @property toolbarLeftActions\n       * @type Array\n       * @final\n       */\n      toolbarLeftActions: {\n        value: []\n      },\n\n      /**\n       * The list of right actions for the toolbar.\n       *\n       * @property toolbarRightActions\n       * @type Array\n       * @final\n       */\n      toolbarRightActions: {\n        value: []\n      },\n\n      /**\n       * The list of right actions for the advanced toolbar.\n       *\n       * @property advancedToolbarRightActions\n       * @type Array\n       * @final\n       */\n      advancedToolbarRightActions: {\n        value: []\n      },\n\n      /**\n       * Languages actions for the advanced toolbar.\n       *\n       * @property advancedToolbarLanguageActions\n       * @type Array\n       * @final\n       */\n      advancedToolbarLanguageActions: {\n        value: []\n      },\n\n      /**\n       * Toolbar page info.\n       *\n       * Holds the configuration of the toolbar info action button which presents an information about the actual\n       * page. Information message changes with the router page.\n       *\n       * @property toolbarPageInfo\n       * @type Object\n       * @final\n       */\n      toolbarPageInfo: {\n        value: {\n          type: 'info',\n          message: null,\n          accessibility: translateFilter('HEADER.INFO_ACCESSIBILITY'),\n          help: translateFilter('HEADER.INFO_TOOLTIP')\n        }\n      },\n\n      /**\n       * Navigation menu for opa-nav component.\n       *\n       * @property navMenu\n       * @type Array\n       * @final\n       */\n      navMenu: {\n        value: []\n      },\n\n      /**\n       * Advanced navigation menu for opa-nav component.\n       *\n       * @property advancedNavMenu\n       * @type Array\n       * @final\n       */\n      advancedNavMenu: {\n        value: []\n      },\n\n      /**\n       * User's language.\n       *\n       * @property userLanguage\n       * @type String\n       * @final\n       */\n      userLanguage: {\n        value: opaUserFactory.getLanguage() || opaI18nFactory.getLanguages()[0]\n      },\n\n      /**\n       * Indicates if ng-view is loaded or not.\n       *\n       * true if view is loaded, false if it is currently loading.\n       *\n       * @property isViewLoaded\n       * @type Boolean\n       */\n      isViewLoaded: {\n        value: false,\n        writable: true\n      },\n\n      /**\n       * Initializes properties for sub components.\n       *\n       * @method init\n       * @final\n       */\n      init: {\n        value: function() {\n          var navLanguagesActions = [];\n          var navDashboardAction = {\n            label: translateFilter('NAV.DASHBOARD'),\n            icon: 'dashboard',\n            action: ctrl.goTo,\n            href: '/'\n          };\n          var navSettingsAction = {\n            label: translateFilter('NAV.SETTINGS'),\n            icon: 'settings',\n            action: ctrl.goTo,\n            href: '/settings'\n          };\n          var navPromotedVideosAction = {\n            label: translateFilter('NAV.PROMOTED_VIDEOS'),\n            icon: 'view_quilt',\n            action: ctrl.goTo,\n            href: '/promoted-videos'\n          };\n\n          opaI18nFactory.getLanguages().forEach(function(language) {\n            ctrl.advancedToolbarLanguageActions.push({\n              label: translateFilter('HEADER.LANGUAGES.' + language),\n              accessibility: translateFilter('HEADER.LANGUAGES.' + language + '_ACCESSIBILITY'),\n              code: language,\n              action: ctrl.setLanguage,\n              selected: language === ctrl.userLanguage\n            });\n            navLanguagesActions.push({\n              label: translateFilter('NAV.LANGUAGES.' + language),\n              code: language,\n              action: ctrl.setLanguage,\n              selected: language === ctrl.userLanguage\n            });\n          });\n\n          ctrl.toolbarLeftActions.push(\n            {\n              type: 'icon',\n              accessibility: translateFilter('HEADER.TOGGLE_MENU_ACCESSIBILITY'),\n              help: translateFilter('HEADER.TOGGLE_MENU_TOOLTIP'),\n              icon: 'menu',\n              action: ctrl.toggleSideNavigation\n            }\n          );\n\n          ctrl.toolbarRightActions.push(ctrl.toolbarPageInfo);\n\n          ctrl.advancedToolbarRightActions.push(\n            {\n              type: 'icon',\n              accessibility: translateFilter('HEADER.VIEW_PORTAL_ACCESSIBILITY'),\n              help: translateFilter('HEADER.VIEW_PORTAL_TOOLTIP'),\n              icon: 'visibility',\n              action: ctrl.goToPortal\n            },\n            {\n              type: 'list',\n              accessibility: translateFilter('HEADER.TOGGLE_LANGUAGES_ACCESSIBILITY'),\n              help: translateFilter('HEADER.TOGGLE_LANGUAGES_TOOLTIP'),\n              icon: 'language',\n              menu: ctrl.advancedToolbarLanguageActions\n            },\n            {\n              type: 'list',\n              accessibility: translateFilter('HEADER.TOGGLE_USER_ACTIONS_ACCESSIBILITY'),\n              help: translateFilter('HEADER.TOGGLE_USER_ACTIONS_TOOLTIP'),\n              icon: 'account_circle',\n              menu: [\n                {\n                  label: translateFilter('HEADER.USER_ACTIONS.DISCONNECT'),\n                  accessibility: translateFilter('HEADER.USER_ACTIONS.DISCONNECT_ACCESSIBILITY'),\n                  action: ctrl.logout\n                }\n              ]\n            }\n          );\n\n          ctrl.navMenu.push(navDashboardAction, navPromotedVideosAction, navSettingsAction);\n\n          ctrl.advancedNavMenu.push(\n            navDashboardAction,\n            navPromotedVideosAction,\n            navSettingsAction,\n            {\n              divider: true\n            },\n            {\n              label: translateFilter('NAV.VIEW_PORTAL'),\n              icon: 'visibility',\n              action: ctrl.goToPortal\n            },\n            {\n              label: translateFilter('NAV.LANGUAGE'),\n              icon: 'language',\n              actions: navLanguagesActions\n            },\n            {\n              divider: true\n            },\n            {\n              label: translateFilter('NAV.LOGOUT'),\n              icon: 'power_settings_new',\n              action: ctrl.logout\n            }\n          );\n        }\n      },\n\n      /**\n       * Logs out current user.\n       *\n       * @method logout\n       * @final\n       */\n      logout: {\n        value: function() {\n          opaUserFactory.logout().then(function() {\n            ctrl.goToPortal();\n          });\n        }\n      },\n\n      /**\n       * Navigates to a back office page.\n       *\n       * @method goTo\n       * @param {Object} item The menu item\n       * @param {String} item.href The path to navigate to\n       * @final\n       */\n      goTo: {\n        value: function(item) {\n          $location.path(item.href);\n          ctrl.closeSideNavigation();\n        }\n      },\n\n      /**\n       * Navigates to the front office of the portal.\n       *\n       * @method goToPortal\n       * @final\n       */\n      goToPortal: {\n        value: function() {\n          $window.location.href = '/';\n        }\n      },\n\n      /**\n       * Sets user's language.\n       *\n       * @method setLanguage\n       * @param {Object} language A language description object\n       * @param {String} language.code The language country code\n       * @final\n       */\n      setLanguage: {\n        value: function(language) {\n          opaUserFactory.setLanguage(language.code);\n          $window.location.href = '/be' + $location.path();\n        }\n      },\n\n      /**\n       * Closes side navigation.\n       *\n       * @method closeSideNavigation\n       * @final\n       */\n      closeSideNavigation: {\n        value: function() {\n          $mdSidenav('opa').close();\n        }\n      },\n\n      /**\n       * Opens / closes side navigation.\n       *\n       * @method toggleSideNavigation\n       * @final\n       */\n      toggleSideNavigation: {\n        value: function() {\n          $mdSidenav('opa').toggle();\n        }\n      },\n\n      /**\n       * Marks a menu item as selected.\n       *\n       * Both navigation menu and advanced navigation menu are updated.\n       * The item with an \"href\" property corresponding to the given path will be selected,\n       * selection on other items is removed.\n       *\n       * @method selectMenuItem\n       * @final\n       * @param {String} routePath The path of the item to select\n       */\n      selectMenuItem: {\n        value: function(path) {\n          var selectItem = function(navItem) {\n            if (navItem.href === path)\n              navItem.selected = true;\n            else\n              navItem.selected = false;\n          };\n\n          ctrl.navMenu.forEach(selectItem);\n          ctrl.advancedNavMenu.forEach(selectItem);\n        }\n      }\n\n    });\n\n    // Listen to route change start event\n    $scope.$on('$routeChangeStart', function(event, next) {\n      ctrl.isViewLoaded = false;\n      if (!opaUserFactory.isAuthenticated()) ctrl.goToPortal();\n    });\n\n    // Listen to route change success event\n    $scope.$on('$routeChangeSuccess', function(event, route) {\n      ctrl.page.title = route && route.title;\n      ctrl.page.pageTitle = route && route.pageTitle;\n      ctrl.toolbarPageInfo.message = (route && route.pageInfo) ? translateFilter(route.pageInfo) : null;\n      ctrl.selectMenuItem(route.originalPath);\n    });\n\n    // Listen to view loaded event emitted by ng-views\n    $scope.$on('opaViewLoaded', function() {\n      ctrl.isViewLoaded = true;\n    });\n\n    // Listen to event informing about an HTTP error\n    // On a not authenticated error log out the user\n    // On other errors just inform the user by displaying a notification\n    $scope.$on('opaHttpError', function(event, data) {\n      if (data && data.authenticationError)\n        ctrl.logout();\n      else\n        opaNotificationFactory.displayNotification(data.message, 0);\n    });\n\n    ctrl.init();\n  }\n\n  app.controller('OpaIndexController', OpaIndexController);\n  OpaIndexController.$inject = [\n    '$scope',\n    '$route',\n    '$window',\n    '$location',\n    '$filter',\n    '$mdMedia',\n    '$mdSidenav',\n    'opaUserFactory',\n    'opaI18nFactory',\n    'opaNotificationFactory'\n  ];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n/**\n * Promoted videos component presents an editor to promote 9 videos.\n *\n * The editor is made of placeholders symbolizing front office promoted videos. Videos can be added from a\n * placeholder using a media library.\n *\n *     <opa-promoted-videos></opa-promoted-videos>\n *\n * Requires:\n * - **ngMaterial** AngularJS Material module\n * - **opaSettingsFactory** Factory to manage Portal settings\n * - **opaVideosFactory** Factory to manage videos\n * - **opaNotificationFactory** Notification factory to display saving notifications\n * - **opaUrlFactory** URL factory to manipulate URLs\n * - **opaTranslate** Internationalization translate filter\n * - **opaMediaContainer** Component to select a media from the media library\n *\n * @class opaPromotedVideos\n */\n\n(function(app) {\n\n  app.component('opaPromotedVideos', {\n    templateUrl: 'opa-promotedVideos.html',\n    controller: 'OpaPromotedVideosController',\n    bindings: {}\n  });\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n/**\n * Settings component presents a formular to configure the portal.\n *\n *     <opa-settings></opa-settings>\n *\n * Requires:\n * - **ngMaterial** AngularJS Material module\n * - **opaSettingsFactory** Factory to manage Portal settings\n * - **opaGroupsFactory** Factory to get OpenVeo groups\n * - **opaNotificationFactory** Factory to manage notifications\n * - **opaLiveSettings** Formular to configure OpenVeo Portal live\n * - **opaTranslate** Internationalization translate filter\n *\n * @class opaSettings\n */\n\n(function(app) {\n\n  app.component('opaSettings', {\n    templateUrl: 'opa-settings.html',\n    controller: 'OpaSettingsController',\n    require: ['?^mdContent'],\n    bindings: {}\n  });\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Manages opaAbout component.\n   *\n   * @class OpaAboutController\n   * @constructor\n   * @param {Object} $filter AngularJS $filter service\n   * @param {Object} opaAboutFactory Factory to get information about OpenVeo Portal\n   */\n  function OpaAboutController($filter, opaAboutFactory) {\n    var ctrl = this;\n\n    Object.defineProperties(ctrl, {\n\n      /**\n       * Information about OpenVeo Portal.\n       *\n       * @property information\n       * @type Object\n       * @default {}\n       */\n      information: {\n        value: {},\n        writable: true\n      },\n\n      /**\n       * About message which varies regarding project's information.\n       *\n       * @property message\n       * @type String\n       * @default ''\n       */\n      message: {\n        value: '',\n        writable: true\n      },\n\n      /**\n       * Indicates if component is loaded and can be displayed.\n       *\n       * @property isLoaded\n       * @type Boolean\n       * @default false\n       */\n      isLoaded: {\n        value: false,\n        writable: true\n      },\n\n      /**\n       * Initializes controller.\n       *\n       * @method $onInit\n       * @final\n       */\n      $onInit: {\n        value: function() {\n          opaAboutFactory.getInfo().then(function(info) {\n            ctrl.isLoaded = true;\n            ctrl.information = info.data;\n\n            // Prepare message regarding if an update is available or not\n            ctrl.message = $filter('opaTranslate')(\n              (ctrl.information.updateAvailable) ?\n              'DASHBOARD.ABOUT.NEED_UPGRADE_DESCRIPTION' :\n              'DASHBOARD.ABOUT.UP_TO_DATE_DESCRIPTION',\n              0,\n              {\n                '%version%': ctrl.information.version,\n                '%versionUrl%': ctrl.information.versionReleaseUrl,\n                '%latestVersion%': ctrl.information.latestVersion,\n                '%latestVersionUrl%': ctrl.information.latestVersionReleaseUrl\n              }\n            );\n\n          }, function(error) {\n            ctrl.isLoaded = true;\n          });\n        }\n      }\n\n    });\n  }\n\n  app.controller('OpaAboutController', OpaAboutController);\n  OpaAboutController.$inject = ['$filter', 'opaAboutFactory'];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n/**\n * About component presents information about OpenVeo Portal project.\n *\n *     <opa-about></opa-about>\n *\n * Requires:\n * - **ngMaterial** AngularJS Material module\n * - **opaTranslate** Internationalization translate filter\n * - **opaInfoButton** Component used to display info actions\n *\n * @class opaAbout\n */\n\n(function(app) {\n\n  app.component('opaAbout', {\n    templateUrl: 'opa-about.html',\n    controller: 'OpaAboutController',\n    bindings: {}\n  });\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Manages opaMediaLibrary component.\n   *\n   * @class OpaMediaLibraryController\n   * @constructor\n   * @param {Object} opaUrlFactory URL factory to manipulate URLs\n   */\n  function OpaMediaLibraryController($element, $http, opaWebServiceBasePath, opaUrlFactory) {\n    var self = this;\n\n    Object.defineProperties(self, {\n\n      /**\n       * The list of medias present in the select.\n       *\n       * @property medias\n       * @type Array\n       */\n      medias: {\n        value: [],\n        writable: true\n      },\n\n      /**\n       * Search keyword.\n       *\n       * @property search\n       * @type String\n       */\n      keyword: {\n        value: null,\n        writable: true\n      },\n\n      /**\n       * Medias sort field.\n       *\n       * @property sortField\n       * @type string\n       */\n      sortField: {\n        value: 'date',\n        writable: true\n      },\n\n      /**\n       * Medias sort direction.\n       *\n       * @property sortDirection\n       * @type String\n       */\n      sortDirection: {\n        value: 'desc',\n        writable: true\n      },\n\n      /**\n       * Indicates if next page loading is triggered\n       *\n       * @property triggered\n       * @type Boolean\n       */\n      triggered: {\n        value: false,\n        writable: true\n      },\n\n      /**\n       * Number of results per page.\n       *\n       * @property limit\n       * @type Number\n       */\n      limit: {\n        value: null,\n        writable: true\n      },\n\n      /**\n       * Current page.\n       *\n       * @property currentPage\n       * @type Number\n       */\n      currentPage: {\n        value: null,\n        writable: true\n      },\n\n      /**\n       * Number of (filtered) pages.\n       *\n       * @property totalPages\n       * @type Number\n       */\n      totalPages: {\n        value: null,\n        writable: true\n      },\n\n      /**\n       * Indicates if data is loading.\n       *\n       * @property isLoading\n       * @type Boolean\n       */\n      isLoading: {\n        value: false,\n        writable: true\n      },\n\n      /**\n       * Initializes the constructor.\n       *\n       * @method $onInit\n       * @final\n       */\n      $onInit: {\n        value: function() {\n          self.limit = self.opaResultsPerPage || 25;\n          self.init();\n\n          var select = $element.find('opa-media-select');\n          var container = select.parent();\n\n          container.on('scroll', function() {\n            var progress = this.scrollTop / (this.scrollHeight - this.clientHeight);\n\n            if (progress < 0.7) {\n              self.triggered = false;\n            } else if (progress > 0.8 && self.triggered === false) {\n              self.triggered = true;\n              self.addNextPage();\n            }\n          });\n        }\n      },\n\n      /**\n       * Initialize first media fetch.\n       *\n       * @method init\n       * @final\n       */\n      init: {\n        value: function() {\n          self.keyword = null;\n          self.search();\n        }\n      },\n\n      /**\n       * Loads the first page of a new search.\n       *\n       * @method search\n       * @final\n       */\n      search: {\n        value: function() {\n          self.currentPage = null;\n          self.totalPages = null;\n\n          self.fetch(function(response) {\n            self.currentPage = 1;\n            self.totalPages = response.data.pagination.pages;\n            self.medias = response.data.entities;\n          });\n        }\n      },\n\n      /**\n       * Loads the next page of medias.\n       *\n       * @method addNextPage\n       * @final\n       */\n      addNextPage: {\n        value: function() {\n          if (self.currentPage === self.totalPages) {\n            return;\n          }\n\n          self.fetch(function(response) {\n            self.currentPage++;\n            self.medias = self.medias.concat(response.data.entities);\n          });\n        }\n      },\n\n      /**\n       * Calls the Web Service for medias fetching.\n       *\n       * @method fetch\n       * @final\n       */\n      fetch: {\n        value: function(callback) {\n          if (self.isLoading)\n            return;\n\n          self.isLoading = true;\n\n          var data = {\n            filter: {\n              sortBy: self.sortField,\n              sortOrder: self.sortDirection,\n              include: ['id', 'title', 'date', 'thumbnail']\n            },\n            pagination: {\n              limit: self.limit\n            }\n          };\n\n          if (self.keyword)\n            data.filter.query = self.keyword;\n\n          if (self.currentPage)\n            data.pagination.page = self.currentPage;\n\n          $http\n            .post(opaWebServiceBasePath + 'videos', data)\n            .then(\n              function(response) {\n                self.isLoading = false;\n                self.triggered = false;\n\n                response.data.entities.forEach(function(entity) {\n                  entity.preview = opaUrlFactory.setUrlParameter(entity.thumbnail, 'style', 'publish-square-142');\n                });\n\n                return callback(response);\n              },\n              function(error) {\n                self.isLoading = false;\n              });\n        }\n      }\n\n    });\n  }\n\n  app.controller('OpaMediaLibraryController', OpaMediaLibraryController);\n  OpaMediaLibraryController.$inject = ['$element', '$http', 'opaWebServiceBasePath', 'opaUrlFactory'];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * Media library component provides medias for media select component\n *\n * <opa-media-library ng-model=\"ngmodel\"\n *                    opa-multiple=\"multiple\"\n *                    opa-results-per-page=\"limit\">\n * </opa-media-library>\n *\n * Available attributes are:\n * - [Mixed] **ng-model**: The selected medias, it can be an array when multiple selection is active,\n *                         or a single value (string) otherwise.\n * - [Boolean] **opa-multiple**: Enable multiple selection\n *\n *\n * Requires:\n * - **ngMaterial** AngularJS Material module\n *\n * @module opa\n * @class opaMediaLibrary\n */\n\n(function(app) {\n  app.component('opaMediaLibrary', {\n    templateUrl: 'opa-mediaLibrary.html',\n    controller: 'OpaMediaLibraryController',\n    bindings: {\n      opaMultiple: '<',\n      opaResultsPerPage: '<',\n      ngModel: '='\n    }\n  });\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n/**\n * Dashboard component presents a list of components as cards.\n *\n *     <opa-dashboard></opa-dashboard>\n *\n * Requires:\n * - **ngMaterial** AngularJS Material module\n * - **opaAbout** Component presenting information about Portal\n *\n * @class opaDashboard\n */\n\n(function(app) {\n\n  app.component('opaDashboard', {\n    templateUrl: 'opa-dashboard.html',\n    controller: 'OpaDashboardController',\n    bindings: {}\n  });\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n/**\n * Live settings component presents a formular to configure OpenVeo Portal live.\n *\n *     <opa-live-settings></opa-live-settings>\n *\n * Available attributes are:\n *   - [Object] **[opa-settings]**: The live settings with:\n *     - [Boolean] **[activated]**: true if live is activated, false otherwise\n *     - [String] **[playerType]**: The type of live player, could be either \"youtube\", \"wowza\" or \"vodalys\"\n *     - [String] **[url]**: The live streeam url depending on \"playerType\"\n *     - [Boolean] **[private]**: true if access to the live must be restricted to some OpenVeo groups\n *     - [Array] **[groups]**: The list of OpenVeo groups which have access to the private live\n *   - [Object] **[opa-groups]**: The list of available groups\n *   - [Function] **[opa-on-update]**: Function to call when live settings have been modified\n *\n * Requires:\n * - **ngMaterial** AngularJS Material module\n * - **opaTranslate** Internationalization translate filter\n * - **opaInfoButton** Component used to display info actions\n * - **opaStreamUrlValidator** Stream URL validator\n * - **opaLicenseKeyValidator** License key validator\n * - **opaTags** Form element to enter a list of tags\n *\n * @class opaLiveSettings\n */\n\n(function(app) {\n\n  app.component('opaLiveSettings', {\n    templateUrl: 'opa-liveSettings.html',\n    controller: 'OpaLiveSettingsController',\n    bindings: {\n      opaSettings: '<',\n      opaGroups: '<',\n      opaOnUpdate: '&'\n    }\n  });\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n/**\n * Actions button component presents a collapsable button with a list of actions.\n *\n *     $scope.icon = 'angular_material_icon_id';\n *     $scope.label = 'Button label';\n *     $scope.actions = [\n *       {\n *         label 'Action label',\n *         icon: 'angular_material_icon_id',\n *         selected: true,\n *         action: function() {\n *           console.log('Do something');\n *         }\n *       }\n *     ];\n *\n *     <opa-actions-button opa-label=\"{{label}}\" opa-icon=\"{{icon}}\" opa-actions=\"actions\"></opa-actions-button>\n *\n * Available attributes are:\n * - [String] **opa-label**: The button label\n * - [String] **[opa-icon]**: An icon to display before the label, it must be an AngularJS Material icon id\n * - [Array] **opa-actions**: The list of actions with for each action:\n *   - [String] **label**: The action label\n *   - [Function] **action**: A function to call when the action is clicked\n *   - [String] **[icon]**: An icon to display before the label, must be an Angular Material icon id\n *   - [Boolean] **[selected]**: A boolean indicating if the action must appear as selected\n *\n * Requires:\n * - **ngMaterial** AngularJS Material module\n *\n * @class opaActionsButton\n */\n\n(function(app) {\n\n  app.component('opaActionsButton', {\n    templateUrl: 'opa-actionsButton.html',\n    controller: 'OpaActionsButtonController',\n    bindings: {\n      opaLabel: '@',\n      opaIcon: '@',\n      opaActions: '<'\n    }\n  });\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n(function(app) {\n\n  /**\n   * Manages information dialogs.\n   *\n   * @class OpaInfoController\n   * @constructor\n   * @param {Object} $scope Directive isolated scope\n   * @param {Object} $element JQLite element of the directive\n   * @param {Object} $document JQLite element of the document\n   * @param {Object} $timeout AngularJS $timeout service\n   * @param {Object} $mdPanel AngularJS Material service to create panels\n   * @param {Object} opaInfoConfiguration opa-info configuration service\n   */\n  function OpaInfoController($scope, $element, $document, $timeout, $mdPanel, opaInfoConfiguration) {\n    var ctrl = this;\n    var panelReference = null;\n    var panelPromise = null;\n    var panelPosition = $mdPanel.newPanelPosition();\n    var defaultOptions = opaInfoConfiguration.getOptions();\n\n    Object.defineProperties(ctrl, {\n\n      /**\n       * Opens the information dialog.\n       *\n       * @method open\n       * @final\n       */\n      open: {\n        value: function() {\n          if (panelReference || panelPromise) return;\n\n          panelPromise = $mdPanel.open({\n            templateUrl: 'opa-info.html',\n            controller: function() {\n              this.close = ctrl.close;\n            },\n            controllerAs: 'ctrl',\n            locals: {\n              message: ctrl.message,\n              closeLabel: ctrl.closeLabel,\n              closeAriaLabel: ctrl.closeAriaLabel\n            },\n            attachTo: $document[0].body,\n            escapeToClose: true,\n            clickOutsideToClose: true,\n            position: panelPosition,\n            onCloseSuccess: function() {\n              panelReference = null;\n              $element[0].focus();\n            }\n          }).then(function(reference) {\n            panelPromise = null;\n            panelReference = reference;\n\n            $timeout(function() {\n\n              // Set focus on button\n              $document[0].querySelector('.opa-info button').focus();\n\n            }, 1);\n\n          });\n        }\n      },\n\n      /**\n       * Closes the information dialog.\n       *\n       * @method close\n       * @final\n       */\n      close: {\n        value: function() {\n          if (panelReference) {\n            panelReference.close();\n          }\n        }\n      },\n\n      /**\n       * Initializes controller.\n       *\n       * @method $onInit\n       */\n      $onInit: {\n        value: function() {\n          panelPosition.relativeTo($element).addPanelPosition(\n            $mdPanel.xPosition.ALIGN_START,\n            $mdPanel.yPosition.BELOW\n          );\n        }\n      },\n\n      /**\n       * Handles attributes changes.\n       *\n       * Validate attributes.\n       *\n       * @method $onChanges\n       * @param {Object} changedProperties Properties which have changed since last digest loop\n       * @param {Object} [changedProperties.closeLabel] opa-close attribute old and new value\n       * @param {String} [changedProperties.closeLabel.currentValue] opa-close new value\n       * @param {Object} [changedProperties.closeAriaLabel] opa-close-aria attribute old and new value\n       * @param {String} [changedProperties.closeAriaLabel.currentValue] opa-close-aria new value\n       * @final\n       */\n      $onChanges: {\n        value: function(changedProperties) {\n          if (changedProperties.closeLabel)\n            ctrl.closeLabel = changedProperties.closeLabel.currentValue || defaultOptions.closeLabel;\n\n          if (changedProperties.closeAriaLabel)\n            ctrl.closeAriaLabel = changedProperties.closeAriaLabel.currentValue || defaultOptions.closeAriaLabel;\n        }\n      }\n\n    });\n\n    // Add click event handler to open the dialog\n    $element.on('click', ctrl.open);\n\n    // Remove event handler on destroy\n    $scope.$on('$destroy', function() {\n      ctrl.close();\n      $element.off('click', ctrl.open);\n    });\n  }\n\n  app.controller('OpaInfoController', OpaInfoController);\n  OpaInfoController.$inject = ['$scope', '$element', '$document', '$timeout', '$mdPanel', 'opaInfoConfiguration'];\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n/**\n * Info button presents an information button opening a dialog with a message.\n *\n * It uses opa-info directive to display the message.\n *\n *     $scope.message = 'Message which may contain HTML';\n *\n *     <opa-info-button\n *       opa-message=\"message\"\n *       opa-accessibility=\"Info button accessibility message\"\n *       opa-help=\"Info button tooltip text\"\n *     ></opa-info-button>\n *\n * Available attributes are:\n *   - [String] **opa-message**: An AngularJS expression evaluating to a wrapped version of the message that can be\n *     used as a trusted variant in $sce.HTML context\n *   - [String] **[opa-accessibility]**: The button accessibility message\n *   - [String] **[opa-help]**: The tooltip text\n *\n * Requires:\n * - **ngMaterial** AngularJS Material module\n * - **opaInfo** Directive opening a panel with a message and a close button\n *\n * @class opa\n */\n\n(function(app) {\n\n  app.component('opaInfoButton', {\n    templateUrl: 'opa-infoButton.html',\n    controller: 'OpaInfoButtonController',\n    bindings: {\n      opaMessage: '<',\n      opaAccessibility: '@',\n      opaHelp: '@'\n    }\n  });\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * Media container component provides a container where media can be put inside.\n *\n * <opa-media-container opa-title=\"{{ title }}\"\n *                      opa-media=\"media\"\n *                      opa-edit=\"editAction()\"\n *                      opa-remove=\"removeAction()\">\n * </opa-media-container>\n *\n * Available attributes are:\n * - [String] **opa-title**: The title of the container\n * - [Object] **opa-media**: The media to place in the container\n * - [Function] **opa-edit**: The callback to launch for select a media\n * - [Function] **opa-remove**: The callback to launch to clear the media\n *\n * Requires:\n * - **ngMaterial** AngularJS Materiel module\n *\n * @module opa\n * @class opaMediaSelect\n */\n(function(app) {\n  app.component('opaMediaContainer', {\n    templateUrl: 'opa-mediaContainer.html',\n    controller: 'OpaMediaContainerController',\n    controllerAs: 'ctrl',\n    bindings: {\n      opaTitle: '@',\n      opaMedia: '<',\n      opaEdit: '&',\n      opaRemove: '&'\n    }\n  });\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * Media option component presents the thumbnail of a media with a checkbox to select it.\n *\n * <opa-media-option opa-checked=\"value\"\n *                   opa-media=\"media\"\n *                   opa-focus=\"focus\">\n *                   opa-blur=\"blurCallback()\"></opa-media-option>\n *\n * Available attributes are:\n * - [Boolean] **opa-checked**: The state of the checkbox\n * - [Object] **opa-media**: The media to represent\n * - [Boolean] **opa-focus**: Activate focus on the media\n * - [Function] **opa-blur**: Blur callback function\n *\n * Requires\n * - **ngMaterial** AngularJS Material module\n * - **opaMediaSelect** OpenVeo Media select component\n *\n * @module opa\n * @class opaMediaOption\n */\n\n(function(app) {\n\n  app.component('opaMediaOption', {\n    templateUrl: 'opa-mediaOption.html',\n    controller: 'OpaMediaOptionController',\n\n    // md-truncate overrides $ctrl\n    controllerAs: 'ctrl',\n    require: {\n      selectCtrl: '^opaMediaSelect'\n    },\n    bindings: {\n      opaChecked: '<',\n      opaMedia: '<',\n      opaFocus: '<',\n      opaBlur: '&'\n    }\n  });\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * Media select component provides a (multiple or single) media selection within a list of medias\n *\n * <opa-media-select ng-model=\"ngModel\"\n *                   opa-medias=\"medias\"\n *                   opa-multiple=\"selectionMultiple\">\n * </opa-media-select>\n *\n * Available attributes are:\n * - [Mixed] **ng-model**: The selected medias, it can be an array when multiple selection is active,\n *                         or a single value (string) otherwise.\n * - [Array] **opa-medias**: The list of available medias\n * - [Boolean] **opa-multiple**: Enable multiple selection\n *\n * Requires:\n * - **ngMaterial** AngularJS Material module\n *\n * @module opa\n * @class opaMediaSelect\n */\n\n(function(app) {\n  app.component('opaMediaSelect', {\n    templateUrl: 'opa-mediaSelect.html',\n    controller: 'OpaMediaSelectController',\n    bindings: {\n      ngModel: '=',\n      opaMedias: '<',\n      opaMultiple: '<'\n    }\n  });\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n/**\n * Nav component presents side navigation menu.\n *\n *     $scope.menu = [\n *       {\n *         label: 'Menu item label',\n *         icon: 'angular_material_icon_id',\n *         selected: true,\n *         action: function() {\n *           console.log('Do something');\n *         }\n *       },\n *       {\n *         divider: true\n *       },\n *       {\n *         label: 'Menu item label',\n *         icon: 'angular_material_icon_id',\n *         actions: [\n *           {\n *             label 'Sub menu item label',\n *             icon: 'angular_material_icon_id',\n *             selected: true,\n *             action: function() {\n *               console.log('Do something');\n *             }\n *           }\n *         ]\n *       }\n *     ];\n *\n *     <opa-nav opa-menu=\"menu\"></opa-nav>\n *\n * Available attributes are:\n * - [Array] **opa-menu**: An array of menu items. Several kind of items exist:\n *   - Simple menu items with:\n *     - [String] **label**: The item label\n *     - [Function] **action**: The function to call when the item is clicked\n *     - [String] **[icon]**: An icon to place before the label, it must be an AngularJS Material icon id\n *     - [Boolean] **[selected]**: A boolean indicating if the item must appear as selected\n *   - Dividers with:\n *     - [Boolean] **divider**: If set to \"true\" the item will be a simple rule. Use it to separate menu items\n *   - Items containing sub items with:\n *     - [String] **label**: The item label\n *     - [String] **[icon]**: An icon to place before the label, it must be an AngularJS Material icon id\n *     - [Array] **actions**: A list of actions with for each action:\n *       - [String] **label**: The action label\n *       - [Function] **action**: The function to call when the action is clicked\n *       - [String] **[icon]**: An icon to place before the label, it must be an AngularJS Material icon id\n *       - [Boolean] **[selected]**: A boolean indicating if the action must appear as selected\n *\n * Requires:\n * - **ngMaterial** AngularJS Material module\n * - **opaActionsButton** Component creating a collapsable button with a list of actions\n *\n * @class opaNav\n */\n\n(function(app) {\n\n  app.component('opaNav', {\n    templateUrl: 'opa-nav.html',\n    controller: 'OpaNavController',\n    bindings: {\n      opaMenu: '<'\n    }\n  });\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n/**\n * Tags component is a form element to enter a list of tags.\n *\n * Tags form element is composed of an input element to add tags followed by the list of added tags. If attribute\n * opa-available-tags is set, an autocomplete displays these tags then no other tag can be added.\n *\n * An AngularJS Material component has the same features (and more) than the md-chips component. But md-chips\n * has some caveats, mostly visual like no support for errors and no support for floating label which\n * completely destructures the whole formular.\n *\n *     <script>\n *       $scope.listOfTags = ['tag1', 'tag2'];\n *       $scope.isRequired = false;\n *       $scope.availableTags = [\n *         {\n *           name: 'Tag 1',\n *           value: 'tag1'\n *         },\n *         {\n *           name: 'Tag 2',\n *           value: 'tag2'\n *         },\n *         {\n *           name: 'Tag 3',\n *           value: 'tag3'\n *         }\n *       ];\n *     </script>\n *     <opa-tags\n *              ng-model=\"listOfTags\"\n *              opa-available-tags=\"availableTags\"\n *              ng-required=\"isRequired\"\n *     >\n *     </opa-tags>\n *\n * opa-tags also works like AngularJS Material input, textarea and md-select elements, it can be added\n * to an md-input-container with a label and error messages.\n *\n *     <script>\n *       $scope.isRequired = true;\n *       $scope.listOfTags = [];\n *     </script>\n *     <form name=\"myForm\">\n *       <mb-input-container>\n *         <label>My tags:</label>\n *         <opa-tags\n *                  name=\"myTags\"\n *                  ng-model=\"listOfTags\"\n *                  ng-required=\"isRequired\"\n *         >\n *         </opa-tags>\n *         <div ng-messages=\"myForm.myTags.$error\">\n *           <div ng-message=\"required\">Error: This field is required</div>\n *         </div>\n *       </mb-input-container>\n *     </form>\n *\n * Available attributes are:\n *   - [Array] **[opa-available-tags]**: The list of predefined tags, if set only tags in this list can be added\n *     and autocomplete is displayed. Each tag must contain:\n *     - [String] **name**: The label of the tag to display in autocomplete and validated tags\n *     - [String] **value**: The unique value of the tag, two tags can't have the same value\n *\n * Requires:\n * - **ngMaterial** AngularJS Material module\n *\n * @class opaTags\n */\n(function(app) {\n\n  app.component('opaTags', {\n    templateUrl: 'opa-tags.html',\n    controller: 'OpaTagsController',\n    require: ['?ngModel', '^?mdInputContainer'],\n    bindings: {\n      opaAvailableTags: '<',\n      ngRequired: '<'\n    }\n  });\n\n})(angular.module('opa'));\n","'use strict';\n\n/**\n * @module opa\n */\n\n/**\n * Toolbar component presents actions and a title.\n *\n *     $scope.toolbarTitle = 'Toolbar title';\n *     $scope.toolbarLeftActions = [\n *       {\n *         type: 'icon',\n *         icon: 'icon_action_icon_id',\n *         help: 'Icon action tooltip message',\n *         accessibility: 'Icon action accessibility message',\n *         action: function() {\n *           console.log('Do something');\n *         }\n *       }\n *     ];\n *\n *     $scope.toolbarRightActions = [\n *       {\n *         type: 'list',\n *         icon: 'list_action_icon_id',\n *         help: 'List action tooltip message',\n *         accessibility: 'List action accessibility message',\n *         menu: [\n *           {\n *             label: 'Sub action label',\n *             selected: true,\n *             accessibility: 'Sub action accessibility message',\n *             action: function() {\n *               console.log('Do something');\n *             }\n *           }\n *         ]\n *       },\n *       {\n *         type: 'text',\n *         label: 'Text action label',\n *         accessibility: 'Text action accessibility message',\n *         action: function() {\n *           console.log('Do something');\n *         }\n *       }\n *     ];\n *     <opa-toolbar\n *                  opa-title=\"{{toolbarTitle}}\"\n *                  opa-left-actions=\"toolbarLeftActions\"\n *                  opa-right-actions=\"toolbarRightActions\"\n *     ></opa-toolbar>\n *\n * Available attributes are:\n * - [String] **[opa-title]**: The toolbar title\n * - [Array] **[opa-left-actions]**: The list of actions. May contain:\n *   - [String] **type**: The type of action, could be either *text*, *icon* or *list*. Depending on type,\n *     properties below can be added\n *   - [...]: Properties depending on the **type** property as described below\n * - [Array] **[opa-right-actions]**: Same as left actions\n *\n * Available action types are:\n * - **text**, a simple text button which may have:\n *   - [String] **label**: The action button label\n *   - [Function] **action**: The function to execute when the button is clicked\n *   - [String] **[accessibility]**: The action accessibility message\n * - **icon**, a simple icon button which may have:\n *   - [Function] **action**: The function to execute when the icon is clicked\n *   - [String] **icon**: An icon representing the action as an Angular Materia icon id\n *   - [String] **[help]**: Tooltip message about the action\n *   - [String] **[accessibility]**: The action accessibility message\n * - **list**, an icon button opening a list of textual actions which may have:\n *   - [String] **icon**: An icon representing the action as an Angular Materia icon id\n *   - [Array] **menu**: A list of simple actions with for each action:\n *     - [String] **label**: The item name\n *     - [Function] **action**: The function to execute when the item is clicked\n*      - [String] **[accessibility]**: The item accessibility message\n *     - [Boolean] **[selected]**: A boolean indicating if the item should be selected by default\n *   - [String] **[accessibility]**: The action accessibility message\n * - **info**, an icon button opening an information dialog with a close button which may have:\n *   - [String] **message**: An AngularJS expression evaluating to a wrapped version of the message that can be\n *     used as a trusted variant in $sce.HTML context\n *   - [String] **[help]**: Tooltip message about the action\n *   - [String] **[accessibility]**: The action accessibility message\n *\n * Requires:\n * - **ngMaterial** The AngularJS Material module\n * - **opaInfoButton** Component used to display info actions\n *\n * @class opaToolbar\n */\n(function(app) {\n\n  app.component('opaToolbar', {\n    templateUrl: 'opa-toolbar.html',\n    controller: 'OpaToolbarController',\n    bindings: {\n      opaTitle: '@',\n      opaLeftActions: '<',\n      opaRightActions: '<'\n    }\n  });\n\n})(angular.module('opa'));\n"]}